# coding: utf-8

"""
    billing REST API documentation

    This document contains the public REST API definitions of the mbed-billing service.

    OpenAPI spec version: 1.4.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..api_client import ApiClient


class DefaultApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_billing_report(self, month, **kwargs):
        """
        Get billing report.
        Fetch generated billing report for the currently authenticated commercial non-subtenant account. Billing reports for subtenant accounts are included in their aggregator's billing report response.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_billing_report(month, async=True)
        >>> result = thread.get()

        :param async bool
        :param str month: Queried year and month of billing report (required)
        :return: ReportResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_billing_report_with_http_info(month, **kwargs)
        else:
            (data) = self.get_billing_report_with_http_info(month, **kwargs)
            return data

    def get_billing_report_with_http_info(self, month, **kwargs):
        """
        Get billing report.
        Fetch generated billing report for the currently authenticated commercial non-subtenant account. Billing reports for subtenant accounts are included in their aggregator's billing report response.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_billing_report_with_http_info(month, async=True)
        >>> result = thread.get()

        :param async bool
        :param str month: Queried year and month of billing report (required)
        :return: ReportResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['month']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_billing_report" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'month' is set
        if ('month' not in params) or (params['month'] is None):
            raise ValueError("Missing the required parameter `month` when calling `get_billing_report`")

        if 'month' in params and not re.search('^\\d{4}-\\d{2}$', params['month']):
            raise ValueError("Invalid value for parameter `month` when calling `get_billing_report`, must conform to the pattern `/^\\d{4}-\\d{2}$/`")

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'month' in params:
            query_params.append(('month', params['month']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api('/v3/billing-report', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ReportResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_billing_report_active_devices(self, month, **kwargs):
        """
        Get raw active devices billing data for the month.
        Fetch raw active devices billing data for the currently authenticated commercial non-subtenant account. They are supplementary data for billing report. The raw active devices billing data for subtenant accounts are included in their aggregator's raw active devices billing data.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_billing_report_active_devices(month, async=True)
        >>> result = thread.get()

        :param async bool
        :param str month: Queried year and month of billing report (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_billing_report_active_devices_with_http_info(month, **kwargs)
        else:
            (data) = self.get_billing_report_active_devices_with_http_info(month, **kwargs)
            return data

    def get_billing_report_active_devices_with_http_info(self, month, **kwargs):
        """
        Get raw active devices billing data for the month.
        Fetch raw active devices billing data for the currently authenticated commercial non-subtenant account. They are supplementary data for billing report. The raw active devices billing data for subtenant accounts are included in their aggregator's raw active devices billing data.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_billing_report_active_devices_with_http_info(month, async=True)
        >>> result = thread.get()

        :param async bool
        :param str month: Queried year and month of billing report (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['month']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_billing_report_active_devices" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'month' is set
        if ('month' not in params) or (params['month'] is None):
            raise ValueError("Missing the required parameter `month` when calling `get_billing_report_active_devices`")

        if 'month' in params and not re.search('^\\d{4}-\\d{2}$', params['month']):
            raise ValueError("Invalid value for parameter `month` when calling `get_billing_report_active_devices`, must conform to the pattern `/^\\d{4}-\\d{2}$/`")

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'month' in params:
            query_params.append(('month', params['month']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api('/v3/billing-report-active-devices', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_billing_report_firmware_updates(self, month, **kwargs):
        """
        Get raw firmware updates billing data for the month.
        Fetch generated firmware update devices billing report for the currently authenticated commercial non-subtenant account. The firmware update devices billing reports for subtenant accounts are included in their aggregator's firmware update devices billing report.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_billing_report_firmware_updates(month, async=True)
        >>> result = thread.get()

        :param async bool
        :param str month: Queried year and month of billing report (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_billing_report_firmware_updates_with_http_info(month, **kwargs)
        else:
            (data) = self.get_billing_report_firmware_updates_with_http_info(month, **kwargs)
            return data

    def get_billing_report_firmware_updates_with_http_info(self, month, **kwargs):
        """
        Get raw firmware updates billing data for the month.
        Fetch generated firmware update devices billing report for the currently authenticated commercial non-subtenant account. The firmware update devices billing reports for subtenant accounts are included in their aggregator's firmware update devices billing report.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_billing_report_firmware_updates_with_http_info(month, async=True)
        >>> result = thread.get()

        :param async bool
        :param str month: Queried year and month of billing report (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['month']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_billing_report_firmware_updates" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'month' is set
        if ('month' not in params) or (params['month'] is None):
            raise ValueError("Missing the required parameter `month` when calling `get_billing_report_firmware_updates`")

        if 'month' in params and not re.search('^\\d{4}-\\d{2}$', params['month']):
            raise ValueError("Invalid value for parameter `month` when calling `get_billing_report_firmware_updates`, must conform to the pattern `/^\\d{4}-\\d{2}$/`")

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'month' in params:
            query_params.append(('month', params['month']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api('/v3/billing-report-firmware-updates', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_service_package_quota(self, **kwargs):
        """
        Service package quota
        Get the available firmware update quota for the currently authenticated commercial acount.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_service_package_quota(async=True)
        >>> result = thread.get()

        :param async bool
        :return: ServicePackageQuota
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_service_package_quota_with_http_info(**kwargs)
        else:
            (data) = self.get_service_package_quota_with_http_info(**kwargs)
            return data

    def get_service_package_quota_with_http_info(self, **kwargs):
        """
        Service package quota
        Get the available firmware update quota for the currently authenticated commercial acount.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_service_package_quota_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: ServicePackageQuota
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_service_package_quota" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api('/v3/service-packages-quota', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ServicePackageQuota',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_service_package_quota_history(self, **kwargs):
        """
        Service package quota history
        Get your quota usage history. This API is available for commercial accounts. Aggregator accounts can see own and subtenant quota usage data. History data is ordered in ascending order based on the added timestamp. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_service_package_quota_history(async=True)
        >>> result = thread.get()

        :param async bool
        :param int limit: Maximum amount of quota history entries contained in one paged response.
        :param str after: To fetch after which quota history id. The results will contain entries after specified entry.
        :return: ServicePackageQuotaHistoryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_service_package_quota_history_with_http_info(**kwargs)
        else:
            (data) = self.get_service_package_quota_history_with_http_info(**kwargs)
            return data

    def get_service_package_quota_history_with_http_info(self, **kwargs):
        """
        Service package quota history
        Get your quota usage history. This API is available for commercial accounts. Aggregator accounts can see own and subtenant quota usage data. History data is ordered in ascending order based on the added timestamp. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_service_package_quota_history_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param int limit: Maximum amount of quota history entries contained in one paged response.
        :param str after: To fetch after which quota history id. The results will contain entries after specified entry.
        :return: ServicePackageQuotaHistoryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'after']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_service_package_quota_history" % key
                )
            params[key] = val
        del params['kwargs']

        if 'limit' in params and params['limit'] > 1000:
            raise ValueError("Invalid value for parameter `limit` when calling `get_service_package_quota_history`, must be a value less than or equal to `1000`")
        if 'limit' in params and params['limit'] < 2:
            raise ValueError("Invalid value for parameter `limit` when calling `get_service_package_quota_history`, must be a value greater than or equal to `2`")
        if 'after' in params and len(params['after']) > 32:
            raise ValueError("Invalid value for parameter `after` when calling `get_service_package_quota_history`, length must be less than or equal to `32`")
        if 'after' in params and len(params['after']) < 32:
            raise ValueError("Invalid value for parameter `after` when calling `get_service_package_quota_history`, length must be greater than or equal to `32`")

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))
        if 'after' in params:
            query_params.append(('after', params['after']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api('/v3/service-packages-quota-history', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ServicePackageQuotaHistoryResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_service_packages(self, **kwargs):
        """
        Get all service packages.
        Get information of all service packages for currently authenticated commercial account. The response is returned with descending order by service package created timestamp, listing first pending service package, then active service package, and previous service packages at last.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_service_packages(async=True)
        >>> result = thread.get()

        :param async bool
        :return: ServicePackagesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_service_packages_with_http_info(**kwargs)
        else:
            (data) = self.get_service_packages_with_http_info(**kwargs)
            return data

    def get_service_packages_with_http_info(self, **kwargs):
        """
        Get all service packages.
        Get information of all service packages for currently authenticated commercial account. The response is returned with descending order by service package created timestamp, listing first pending service package, then active service package, and previous service packages at last.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_service_packages_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: ServicePackagesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_service_packages" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api('/v3/service-packages', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ServicePackagesResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
