# coding: utf-8

"""
    billing REST API documentation

    This document contains the public REST API definitions of the mbed-billing service.

    OpenAPI spec version: 1.4.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ReportAccountContactInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address_line1': 'str',
        'address_line2': 'str',
        'city': 'str',
        'company': 'str',
        'contact': 'str',
        'country': 'str',
        'email': 'str',
        'id': 'str',
        'phone_number': 'str',
        'postal_code': 'str',
        'state': 'str'
    }

    attribute_map = {
        'address_line1': 'address_line1',
        'address_line2': 'address_line2',
        'city': 'city',
        'company': 'company',
        'contact': 'contact',
        'country': 'country',
        'email': 'email',
        'id': 'id',
        'phone_number': 'phone_number',
        'postal_code': 'postal_code',
        'state': 'state'
    }

    def __init__(self, address_line1=None, address_line2=None, city=None, company=None, contact=None, country=None, email=None, id=None, phone_number=None, postal_code=None, state=None):
        """
        ReportAccountContactInfo - a model defined in Swagger
        """

        self._address_line1 = address_line1
        self._address_line2 = address_line2
        self._city = city
        self._company = company
        self._contact = contact
        self._country = country
        self._email = email
        self._id = id
        self._phone_number = phone_number
        self._postal_code = postal_code
        self._state = state
        self.discriminator = None

    @property
    def address_line1(self):
        """
        Gets the address_line1 of this ReportAccountContactInfo.

        :return: The address_line1 of this ReportAccountContactInfo.
        :rtype: str
        """
        return self._address_line1

    @address_line1.setter
    def address_line1(self, address_line1):
        """
        Sets the address_line1 of this ReportAccountContactInfo.

        :param address_line1: The address_line1 of this ReportAccountContactInfo.
        :type: str
        """

        self._address_line1 = address_line1

    @property
    def address_line2(self):
        """
        Gets the address_line2 of this ReportAccountContactInfo.

        :return: The address_line2 of this ReportAccountContactInfo.
        :rtype: str
        """
        return self._address_line2

    @address_line2.setter
    def address_line2(self, address_line2):
        """
        Sets the address_line2 of this ReportAccountContactInfo.

        :param address_line2: The address_line2 of this ReportAccountContactInfo.
        :type: str
        """

        self._address_line2 = address_line2

    @property
    def city(self):
        """
        Gets the city of this ReportAccountContactInfo.

        :return: The city of this ReportAccountContactInfo.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """
        Sets the city of this ReportAccountContactInfo.

        :param city: The city of this ReportAccountContactInfo.
        :type: str
        """

        self._city = city

    @property
    def company(self):
        """
        Gets the company of this ReportAccountContactInfo.

        :return: The company of this ReportAccountContactInfo.
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """
        Sets the company of this ReportAccountContactInfo.

        :param company: The company of this ReportAccountContactInfo.
        :type: str
        """
        if company is None:
            raise ValueError("Invalid value for `company`, must not be `None`")

        self._company = company

    @property
    def contact(self):
        """
        Gets the contact of this ReportAccountContactInfo.

        :return: The contact of this ReportAccountContactInfo.
        :rtype: str
        """
        return self._contact

    @contact.setter
    def contact(self, contact):
        """
        Sets the contact of this ReportAccountContactInfo.

        :param contact: The contact of this ReportAccountContactInfo.
        :type: str
        """

        self._contact = contact

    @property
    def country(self):
        """
        Gets the country of this ReportAccountContactInfo.

        :return: The country of this ReportAccountContactInfo.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """
        Sets the country of this ReportAccountContactInfo.

        :param country: The country of this ReportAccountContactInfo.
        :type: str
        """

        self._country = country

    @property
    def email(self):
        """
        Gets the email of this ReportAccountContactInfo.

        :return: The email of this ReportAccountContactInfo.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this ReportAccountContactInfo.

        :param email: The email of this ReportAccountContactInfo.
        :type: str
        """

        self._email = email

    @property
    def id(self):
        """
        Gets the id of this ReportAccountContactInfo.
        Account id.

        :return: The id of this ReportAccountContactInfo.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ReportAccountContactInfo.
        Account id.

        :param id: The id of this ReportAccountContactInfo.
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def phone_number(self):
        """
        Gets the phone_number of this ReportAccountContactInfo.

        :return: The phone_number of this ReportAccountContactInfo.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """
        Sets the phone_number of this ReportAccountContactInfo.

        :param phone_number: The phone_number of this ReportAccountContactInfo.
        :type: str
        """

        self._phone_number = phone_number

    @property
    def postal_code(self):
        """
        Gets the postal_code of this ReportAccountContactInfo.

        :return: The postal_code of this ReportAccountContactInfo.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """
        Sets the postal_code of this ReportAccountContactInfo.

        :param postal_code: The postal_code of this ReportAccountContactInfo.
        :type: str
        """

        self._postal_code = postal_code

    @property
    def state(self):
        """
        Gets the state of this ReportAccountContactInfo.

        :return: The state of this ReportAccountContactInfo.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this ReportAccountContactInfo.

        :param state: The state of this ReportAccountContactInfo.
        :type: str
        """

        self._state = state

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ReportAccountContactInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
