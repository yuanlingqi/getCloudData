# coding: utf-8

"""
    billing REST API documentation

    This document contains the public REST API definitions of the mbed-billing service.

    OpenAPI spec version: 1.4.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ReportResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account': 'ReportAccountContactInfo',
        'aggregated': 'ReportBillingData',
        'billing_data': 'ReportBillingData',
        'id': 'str',
        'month': 'str',
        'object': 'str',
        'service_package': 'ServicePackageReport',
        'subtenants': 'list[SubtenantAccountReport]'
    }

    attribute_map = {
        'account': 'account',
        'aggregated': 'aggregated',
        'billing_data': 'billing_data',
        'id': 'id',
        'month': 'month',
        'object': 'object',
        'service_package': 'service_package',
        'subtenants': 'subtenants'
    }

    def __init__(self, account=None, aggregated=None, billing_data=None, id=None, month=None, object=None, service_package=None, subtenants=None):
        """
        ReportResponse - a model defined in Swagger
        """

        self._account = account
        self._aggregated = aggregated
        self._billing_data = billing_data
        self._id = id
        self._month = month
        self._object = object
        self._service_package = service_package
        self._subtenants = subtenants
        self.discriminator = None

    @property
    def account(self):
        """
        Gets the account of this ReportResponse.
        Account contact information.

        :return: The account of this ReportResponse.
        :rtype: ReportAccountContactInfo
        """
        return self._account

    @account.setter
    def account(self, account):
        """
        Sets the account of this ReportResponse.
        Account contact information.

        :param account: The account of this ReportResponse.
        :type: ReportAccountContactInfo
        """
        if account is None:
            raise ValueError("Invalid value for `account`, must not be `None`")

        self._account = account

    @property
    def aggregated(self):
        """
        Gets the aggregated of this ReportResponse.
        Aggregated report billing data including all subtenant accounts if any.

        :return: The aggregated of this ReportResponse.
        :rtype: ReportBillingData
        """
        return self._aggregated

    @aggregated.setter
    def aggregated(self, aggregated):
        """
        Sets the aggregated of this ReportResponse.
        Aggregated report billing data including all subtenant accounts if any.

        :param aggregated: The aggregated of this ReportResponse.
        :type: ReportBillingData
        """
        if aggregated is None:
            raise ValueError("Invalid value for `aggregated`, must not be `None`")

        self._aggregated = aggregated

    @property
    def billing_data(self):
        """
        Gets the billing_data of this ReportResponse.
        Report billing data.

        :return: The billing_data of this ReportResponse.
        :rtype: ReportBillingData
        """
        return self._billing_data

    @billing_data.setter
    def billing_data(self, billing_data):
        """
        Sets the billing_data of this ReportResponse.
        Report billing data.

        :param billing_data: The billing_data of this ReportResponse.
        :type: ReportBillingData
        """
        if billing_data is None:
            raise ValueError("Invalid value for `billing_data`, must not be `None`")

        self._billing_data = billing_data

    @property
    def id(self):
        """
        Gets the id of this ReportResponse.
        Billing report id.

        :return: The id of this ReportResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ReportResponse.
        Billing report id.

        :param id: The id of this ReportResponse.
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def month(self):
        """
        Gets the month of this ReportResponse.
        Month of requested billing report

        :return: The month of this ReportResponse.
        :rtype: str
        """
        return self._month

    @month.setter
    def month(self, month):
        """
        Sets the month of this ReportResponse.
        Month of requested billing report

        :param month: The month of this ReportResponse.
        :type: str
        """
        if month is None:
            raise ValueError("Invalid value for `month`, must not be `None`")
        if month is not None and not re.search('^\\d{4}-\\d{2}$', month):
            raise ValueError("Invalid value for `month`, must be a follow pattern or equal to `/^\\d{4}-\\d{2}$/`")

        self._month = month

    @property
    def object(self):
        """
        Gets the object of this ReportResponse.
        Billing report response object. Always set to 'billing-report'.

        :return: The object of this ReportResponse.
        :rtype: str
        """
        return self._object

    @object.setter
    def object(self, object):
        """
        Sets the object of this ReportResponse.
        Billing report response object. Always set to 'billing-report'.

        :param object: The object of this ReportResponse.
        :type: str
        """
        if object is None:
            raise ValueError("Invalid value for `object`, must not be `None`")
        allowed_values = ["billing-report"]
        if object not in allowed_values:
            raise ValueError(
                "Invalid value for `object` ({0}), must be one of {1}"
                .format(object, allowed_values)
            )

        self._object = object

    @property
    def service_package(self):
        """
        Gets the service_package of this ReportResponse.
        Report service package.

        :return: The service_package of this ReportResponse.
        :rtype: ServicePackageReport
        """
        return self._service_package

    @service_package.setter
    def service_package(self, service_package):
        """
        Sets the service_package of this ReportResponse.
        Report service package.

        :param service_package: The service_package of this ReportResponse.
        :type: ServicePackageReport
        """

        self._service_package = service_package

    @property
    def subtenants(self):
        """
        Gets the subtenants of this ReportResponse.
        List of billing reports for subtenant accounts. Empty list if account does not have any subtenant account.

        :return: The subtenants of this ReportResponse.
        :rtype: list[SubtenantAccountReport]
        """
        return self._subtenants

    @subtenants.setter
    def subtenants(self, subtenants):
        """
        Sets the subtenants of this ReportResponse.
        List of billing reports for subtenant accounts. Empty list if account does not have any subtenant account.

        :param subtenants: The subtenants of this ReportResponse.
        :type: list[SubtenantAccountReport]
        """
        if subtenants is None:
            raise ValueError("Invalid value for `subtenants`, must not be `None`")

        self._subtenants = subtenants

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ReportResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
