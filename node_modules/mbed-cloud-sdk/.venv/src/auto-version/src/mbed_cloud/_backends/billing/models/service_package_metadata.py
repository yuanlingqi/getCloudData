# coding: utf-8

"""
    billing REST API documentation

    This document contains the public REST API definitions of the mbed-billing service.

    OpenAPI spec version: 1.4.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ServicePackageMetadata(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'end_time': 'datetime',
        'remaining_quota': 'int',
        'reserved_quota': 'int',
        'start_time': 'datetime'
    }

    attribute_map = {
        'end_time': 'end_time',
        'remaining_quota': 'remaining_quota',
        'reserved_quota': 'reserved_quota',
        'start_time': 'start_time'
    }

    def __init__(self, end_time=None, remaining_quota=None, reserved_quota=None, start_time=None):
        """
        ServicePackageMetadata - a model defined in Swagger
        """

        self._end_time = end_time
        self._remaining_quota = remaining_quota
        self._reserved_quota = reserved_quota
        self._start_time = start_time
        self.discriminator = None

    @property
    def end_time(self):
        """
        Gets the end_time of this ServicePackageMetadata.
        Service package end time.

        :return: The end_time of this ServicePackageMetadata.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """
        Sets the end_time of this ServicePackageMetadata.
        Service package end time.

        :param end_time: The end_time of this ServicePackageMetadata.
        :type: datetime
        """
        if end_time is None:
            raise ValueError("Invalid value for `end_time`, must not be `None`")

        self._end_time = end_time

    @property
    def remaining_quota(self):
        """
        Gets the remaining_quota of this ServicePackageMetadata.
        Current available service package quota.

        :return: The remaining_quota of this ServicePackageMetadata.
        :rtype: int
        """
        return self._remaining_quota

    @remaining_quota.setter
    def remaining_quota(self, remaining_quota):
        """
        Sets the remaining_quota of this ServicePackageMetadata.
        Current available service package quota.

        :param remaining_quota: The remaining_quota of this ServicePackageMetadata.
        :type: int
        """
        if remaining_quota is None:
            raise ValueError("Invalid value for `remaining_quota`, must not be `None`")
        if remaining_quota is not None and remaining_quota < 0:
            raise ValueError("Invalid value for `remaining_quota`, must be a value greater than or equal to `0`")

        self._remaining_quota = remaining_quota

    @property
    def reserved_quota(self):
        """
        Gets the reserved_quota of this ServicePackageMetadata.
        Sum of all open reservations for this account.

        :return: The reserved_quota of this ServicePackageMetadata.
        :rtype: int
        """
        return self._reserved_quota

    @reserved_quota.setter
    def reserved_quota(self, reserved_quota):
        """
        Sets the reserved_quota of this ServicePackageMetadata.
        Sum of all open reservations for this account.

        :param reserved_quota: The reserved_quota of this ServicePackageMetadata.
        :type: int
        """
        if reserved_quota is None:
            raise ValueError("Invalid value for `reserved_quota`, must not be `None`")
        if reserved_quota is not None and reserved_quota < 0:
            raise ValueError("Invalid value for `reserved_quota`, must be a value greater than or equal to `0`")

        self._reserved_quota = reserved_quota

    @property
    def start_time(self):
        """
        Gets the start_time of this ServicePackageMetadata.
        Service package start time.

        :return: The start_time of this ServicePackageMetadata.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """
        Sets the start_time of this ServicePackageMetadata.
        Service package start time.

        :param start_time: The start_time of this ServicePackageMetadata.
        :type: datetime
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")

        self._start_time = start_time

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ServicePackageMetadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
