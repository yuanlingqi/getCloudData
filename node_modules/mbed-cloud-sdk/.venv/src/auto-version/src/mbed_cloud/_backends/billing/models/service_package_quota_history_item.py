# coding: utf-8

"""
    billing REST API documentation

    This document contains the public REST API definitions of the mbed-billing service.

    OpenAPI spec version: 1.4.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ServicePackageQuotaHistoryItem(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'added': 'datetime',
        'amount': 'int',
        'id': 'str',
        'reason': 'str',
        'reservation': 'ServicePackageQuotaHistoryReservation',
        'service_package': 'ServicePackageQuotaHistoryServicePackage'
    }

    attribute_map = {
        'added': 'added',
        'amount': 'amount',
        'id': 'id',
        'reason': 'reason',
        'reservation': 'reservation',
        'service_package': 'service_package'
    }

    def __init__(self, added=None, amount=None, id=None, reason=None, reservation=None, service_package=None):
        """
        ServicePackageQuotaHistoryItem - a model defined in Swagger
        """

        self._added = added
        self._amount = amount
        self._id = id
        self._reason = reason
        self._reservation = reservation
        self._service_package = service_package
        self.discriminator = None

    @property
    def added(self):
        """
        Gets the added of this ServicePackageQuotaHistoryItem.
        Added time of quota history entry.

        :return: The added of this ServicePackageQuotaHistoryItem.
        :rtype: datetime
        """
        return self._added

    @added.setter
    def added(self, added):
        """
        Sets the added of this ServicePackageQuotaHistoryItem.
        Added time of quota history entry.

        :param added: The added of this ServicePackageQuotaHistoryItem.
        :type: datetime
        """
        if added is None:
            raise ValueError("Invalid value for `added`, must not be `None`")

        self._added = added

    @property
    def amount(self):
        """
        Gets the amount of this ServicePackageQuotaHistoryItem.
        the amount of quota usage, negative or positive

        :return: The amount of this ServicePackageQuotaHistoryItem.
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """
        Sets the amount of this ServicePackageQuotaHistoryItem.
        the amount of quota usage, negative or positive

        :param amount: The amount of this ServicePackageQuotaHistoryItem.
        :type: int
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def id(self):
        """
        Gets the id of this ServicePackageQuotaHistoryItem.
        Service package quota history id.

        :return: The id of this ServicePackageQuotaHistoryItem.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ServicePackageQuotaHistoryItem.
        Service package quota history id.

        :param id: The id of this ServicePackageQuotaHistoryItem.
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")
        if id is not None and len(id) > 32:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `32`")
        if id is not None and len(id) < 32:
            raise ValueError("Invalid value for `id`, length must be greater than or equal to `32`")

        self._id = id

    @property
    def reason(self):
        """
        Gets the reason of this ServicePackageQuotaHistoryItem.
        Type of quota usage entry.

        :return: The reason of this ServicePackageQuotaHistoryItem.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """
        Sets the reason of this ServicePackageQuotaHistoryItem.
        Type of quota usage entry.

        :param reason: The reason of this ServicePackageQuotaHistoryItem.
        :type: str
        """
        if reason is None:
            raise ValueError("Invalid value for `reason`, must not be `None`")
        allowed_values = ["reservation", "reservation_release", "reservation_termination", "package_creation", "package_renewal", "package_termination"]
        if reason not in allowed_values:
            raise ValueError(
                "Invalid value for `reason` ({0}), must be one of {1}"
                .format(reason, allowed_values)
            )

        self._reason = reason

    @property
    def reservation(self):
        """
        Gets the reservation of this ServicePackageQuotaHistoryItem.
        Reservation details if reason is reservation, reservation_release or reservation_termination.

        :return: The reservation of this ServicePackageQuotaHistoryItem.
        :rtype: ServicePackageQuotaHistoryReservation
        """
        return self._reservation

    @reservation.setter
    def reservation(self, reservation):
        """
        Sets the reservation of this ServicePackageQuotaHistoryItem.
        Reservation details if reason is reservation, reservation_release or reservation_termination.

        :param reservation: The reservation of this ServicePackageQuotaHistoryItem.
        :type: ServicePackageQuotaHistoryReservation
        """

        self._reservation = reservation

    @property
    def service_package(self):
        """
        Gets the service_package of this ServicePackageQuotaHistoryItem.
        Service package details if reason is package_creation, package_renewal or package_termination

        :return: The service_package of this ServicePackageQuotaHistoryItem.
        :rtype: ServicePackageQuotaHistoryServicePackage
        """
        return self._service_package

    @service_package.setter
    def service_package(self, service_package):
        """
        Sets the service_package of this ServicePackageQuotaHistoryItem.
        Service package details if reason is package_creation, package_renewal or package_termination

        :param service_package: The service_package of this ServicePackageQuotaHistoryItem.
        :type: ServicePackageQuotaHistoryServicePackage
        """

        self._service_package = service_package

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ServicePackageQuotaHistoryItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
