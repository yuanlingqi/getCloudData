# coding: utf-8

"""
    billing REST API documentation

    This document contains the public REST API definitions of the mbed-billing service.

    OpenAPI spec version: 1.4.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class SubtenantAccountReport(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account': 'SubtenantReportAccountContactInfo',
        'billing_data': 'ReportBillingData',
        'service_package': 'SubtenantServicePackageReport'
    }

    attribute_map = {
        'account': 'account',
        'billing_data': 'billing_data',
        'service_package': 'service_package'
    }

    def __init__(self, account=None, billing_data=None, service_package=None):
        """
        SubtenantAccountReport - a model defined in Swagger
        """

        self._account = account
        self._billing_data = billing_data
        self._service_package = service_package
        self.discriminator = None

    @property
    def account(self):
        """
        Gets the account of this SubtenantAccountReport.
        Subtenant account contact information.

        :return: The account of this SubtenantAccountReport.
        :rtype: SubtenantReportAccountContactInfo
        """
        return self._account

    @account.setter
    def account(self, account):
        """
        Sets the account of this SubtenantAccountReport.
        Subtenant account contact information.

        :param account: The account of this SubtenantAccountReport.
        :type: SubtenantReportAccountContactInfo
        """
        if account is None:
            raise ValueError("Invalid value for `account`, must not be `None`")

        self._account = account

    @property
    def billing_data(self):
        """
        Gets the billing_data of this SubtenantAccountReport.
        Report billing data.

        :return: The billing_data of this SubtenantAccountReport.
        :rtype: ReportBillingData
        """
        return self._billing_data

    @billing_data.setter
    def billing_data(self, billing_data):
        """
        Sets the billing_data of this SubtenantAccountReport.
        Report billing data.

        :param billing_data: The billing_data of this SubtenantAccountReport.
        :type: ReportBillingData
        """
        if billing_data is None:
            raise ValueError("Invalid value for `billing_data`, must not be `None`")

        self._billing_data = billing_data

    @property
    def service_package(self):
        """
        Gets the service_package of this SubtenantAccountReport.
        Report service package for subtenant account.

        :return: The service_package of this SubtenantAccountReport.
        :rtype: SubtenantServicePackageReport
        """
        return self._service_package

    @service_package.setter
    def service_package(self, service_package):
        """
        Sets the service_package of this SubtenantAccountReport.
        Report service package for subtenant account.

        :param service_package: The service_package of this SubtenantAccountReport.
        :type: SubtenantServicePackageReport
        """

        self._service_package = service_package

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, SubtenantAccountReport):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
