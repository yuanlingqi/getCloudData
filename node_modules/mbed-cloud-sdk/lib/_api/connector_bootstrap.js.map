{"version":3,"sources":["_api/connector_bootstrap.ts"],"names":[],"mappings":"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","file":"connector_bootstrap.js","sourcesContent":["/* tslint:disable:array-type */\n/* tslint:disable:no-namespace */\n/* tslint:disable:no-string-literal */\n/* tslint:disable:max-classes-per-file */\n/* tslint:disable:no-trailing-whitespace */\n\n// ===============================================\n// This file is autogenerated - Please do not edit\n// Tracks base typescript-fetch mustache 01/02/17\n// ===============================================\n\n/**\n * Bootstrap API\n * Mbed Cloud Bootstrap API allows web applications to control the device bootstrapping process.\n *\n * OpenAPI spec version: 2\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nimport superagent = require(\"superagent\");\nimport { ApiBase } from \"../common/apiBase\";\nimport { SDKError } from \"../common/sdkError\";\n\nexport interface ListOfPreSharedKeysWithoutSecret {\n    /**\n     * An offset token for current page.\n     */\n    \"after\"?: string;\n    /**\n     * An offset token for fetching the next page. Note that exactly the same limit needs to be used on the request for fetching the subsequent pages.\n     */\n    \"continuation_marker\"?: string;\n    /**\n     * Array of the pre-shared key entries. The array is empty if there are no pre-shared keys.\n     */\n    \"data\": Array<PreSharedKeyWithoutSecret>;\n    /**\n     * Are there more results available.\n     */\n    \"has_more\": boolean;\n    /**\n     * The value of limit query parameter from the request, or default if not specified.\n     */\n    \"limit\": number;\n    /**\n     * The type of this API object is a \\\"list\\\".\n     */\n    \"object\": string;\n    /**\n     * The creation time based order of the entries.\n     */\n    \"order\": string;\n}\n\nexport interface PreSharedKey {\n    /**\n     * The unique endpoint identifier that this pre-shared key applies to. 16-64 [printable](https://en.wikipedia.org/wiki/ASCII#Printable_characters) (non-control) ASCII characters.\n     */\n    \"endpoint_name\": string;\n    /**\n     * The secret of the pre-shared key in hexadecimal. It is not case sensitive; 4a is same as 4A, and it is allowed with or without 0x in the beginning. The minimum length of the secret is 128 bits and maximum 256 bits.\n     */\n    \"secret_hex\": string;\n}\n\nexport interface PreSharedKeyWithoutSecret {\n    /**\n     * The date-time (RFC3339) when this pre-shared key was uploaded to Mbed Cloud.\n     */\n    \"created_at\"?: Date;\n    /**\n     * The unique endpoint identifier that this pre-shared key applies to. 16-64 [printable](https://en.wikipedia.org/wiki/ASCII#Printable_characters) (non-control) ASCII characters.\n     */\n    \"endpoint_name\": string;\n}\n\n/**\n * PreSharedKeysApi\n */\nexport class PreSharedKeysApi extends ApiBase {\n\n    /**\n     * Remove a pre-shared key.\n     * Remove a pre-shared key.  **Example usage:**  &#x60;&#x60;&#x60; curl -H \\&quot;authorization: Bearer ${API_TOKEN}\\&quot; -X DELETE https://api.us-east-1.mbedcloud.com/v2/device-shared-keys/my-endpoint-0001 &#x60;&#x60;&#x60; \n     * @param endpointName The unique endpoint identifier that this pre-shared key applies to. [Reserved characters](https://en.wikipedia.org/wiki/Percent-encoding#Percent-encoding_reserved_characters) must be percent-encoded.\n     */\n    public deletePreSharedKey(endpointName: string, callback?: (error: any, data?: any, response?: superagent.Response) => any, requestOptions?: { [key: string]: any }): superagent.SuperAgentRequest {\n        // verify required parameter \"endpointName\" is set\n        if (endpointName === null || endpointName === undefined) {\n            if (callback) {\n                callback(new SDKError(\"Required parameter 'endpointName' missing.\"));\n            }\n            return;\n        }\n\n        const headerParams: any = {};\n\n        const queryParameters: any = {};\n\n        // tslint:disable-next-line:prefer-const\n        let useFormData = false;\n        const formParams: any = {};\n\n        // Determine the Content-Type header\n        const contentTypes: Array<string> = [\n        ];\n\n        // Determine the Accept header\n        const acceptTypes: Array<string> = [\n        ];\n\n        return this.request<null>({\n            url: \"/v2/device-shared-keys/{endpoint_name}\".replace(\"{\" + \"endpoint_name\" + \"}\", String(endpointName)),\n            method: \"DELETE\",\n            headers: headerParams,\n            query: queryParameters,\n            formParams: formParams,\n            useFormData: useFormData,\n            contentTypes: contentTypes,\n            acceptTypes: acceptTypes,\n            requestOptions: requestOptions,\n        }, callback);\n    }\n    /**\n     * Get a pre-shared key.\n     * Check if a pre-shared key for an endpoint exists or not. The response does not contain the secret itself.  **Example usage:**  &#x60;&#x60;&#x60; curl -H \\&quot;authorization: Bearer ${API_TOKEN}\\&quot; https://api.us-east-1.mbedcloud.com/v2/device-shared-keys/my-endpoint-0001 &#x60;&#x60;&#x60; \n     * @param endpointName The unique endpoint identifier that this pre-shared key applies to. [Reserved characters](https://en.wikipedia.org/wiki/Percent-encoding#Percent-encoding_reserved_characters) must be percent-encoded.\n     */\n    public getPreSharedKey(endpointName: string, callback?: (error: any, data?: PreSharedKeyWithoutSecret, response?: superagent.Response) => any, requestOptions?: { [key: string]: any }): superagent.SuperAgentRequest {\n        // verify required parameter \"endpointName\" is set\n        if (endpointName === null || endpointName === undefined) {\n            if (callback) {\n                callback(new SDKError(\"Required parameter 'endpointName' missing.\"));\n            }\n            return;\n        }\n\n        const headerParams: any = {};\n\n        const queryParameters: any = {};\n\n        // tslint:disable-next-line:prefer-const\n        let useFormData = false;\n        const formParams: any = {};\n\n        // Determine the Content-Type header\n        const contentTypes: Array<string> = [\n        ];\n\n        // Determine the Accept header\n        const acceptTypes: Array<string> = [\n        ];\n\n        return this.request<PreSharedKeyWithoutSecret>({\n            url: \"/v2/device-shared-keys/{endpoint_name}\".replace(\"{\" + \"endpoint_name\" + \"}\", String(endpointName)),\n            method: \"GET\",\n            headers: headerParams,\n            query: queryParameters,\n            formParams: formParams,\n            useFormData: useFormData,\n            contentTypes: contentTypes,\n            acceptTypes: acceptTypes,\n            requestOptions: requestOptions,\n        }, callback);\n    }\n    /**\n     * List pre-shared keys.\n     * List pre-shared keys with pagination and default page size of 50 entries.  **Example usage:**  &#x60;&#x60;&#x60; curl -H \\&quot;authorization: Bearer ${API_TOKEN}\\&quot; https://api.us-east-1.mbedcloud.com/v2/device-shared-keys &#x60;&#x60;&#x60; \n     * @param limit The number of entries per page\n     * @param after An offset token for fetching a specific page. Provided by the server.\n     */\n    public listPreSharedKeys(limit?: number, after?: string, callback?: (error: any, data?: ListOfPreSharedKeysWithoutSecret, response?: superagent.Response) => any, requestOptions?: { [key: string]: any }): superagent.SuperAgentRequest {\n\n        const headerParams: any = {};\n\n        const queryParameters: any = {};\n        if (limit !== undefined) {\n            queryParameters[\"limit\"] = limit;\n        }\n        if (after !== undefined) {\n            queryParameters[\"after\"] = after;\n        }\n\n        // tslint:disable-next-line:prefer-const\n        let useFormData = false;\n        const formParams: any = {};\n\n        // Determine the Content-Type header\n        const contentTypes: Array<string> = [\n            \"application/json\"\n        ];\n\n        // Determine the Accept header\n        const acceptTypes: Array<string> = [\n            \"application/json\"\n        ];\n\n        return this.request<ListOfPreSharedKeysWithoutSecret>({\n            url: \"/v2/device-shared-keys\",\n            method: \"GET\",\n            headers: headerParams,\n            query: queryParameters,\n            formParams: formParams,\n            useFormData: useFormData,\n            contentTypes: contentTypes,\n            acceptTypes: acceptTypes,\n            requestOptions: requestOptions,\n        }, callback);\n    }\n    /**\n     * Upload a pre-shared key to Mbed Cloud.\n     * Upload a pre-shared key (PSK) for an endpoint to allow it to bootstrap. The existing key will not be overwritten but needs to be deleted first in case of re-setting PSK for an endpoint.  **Note**: The PSK APIs are available only to accounts that have this feature enabled.  **Example usage:**  &#x60;&#x60;&#x60; curl -H \\&quot;authorization: Bearer ${API_TOKEN}\\&quot; -H \\&quot;content-type: application/json\\&quot; -X POST https://api.us-east-1.mbedcloud.com/v2/device-shared-keys \\\\      -d &#39;{\\&quot;endpoint_name\\&quot;: \\&quot;my-endpoint-0001\\&quot;, \\&quot;secret_hex\\&quot;: \\&quot;4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a\\&quot; }&#39; &#x60;&#x60;&#x60; \n     * @param body Pre-shared key to be uploaded.\n     */\n    public uploadPreSharedKey(body: PreSharedKey, callback?: (error: any, data?: any, response?: superagent.Response) => any, requestOptions?: { [key: string]: any }): superagent.SuperAgentRequest {\n        // verify required parameter \"body\" is set\n        if (body === null || body === undefined) {\n            if (callback) {\n                callback(new SDKError(\"Required parameter 'body' missing.\"));\n            }\n            return;\n        }\n\n        const headerParams: any = {};\n\n        const queryParameters: any = {};\n\n        // tslint:disable-next-line:prefer-const\n        let useFormData = false;\n        const formParams: any = {};\n\n        // Determine the Content-Type header\n        const contentTypes: Array<string> = [\n            \"application/json\"\n        ];\n\n        // Determine the Accept header\n        const acceptTypes: Array<string> = [\n            \"application/json\"\n        ];\n\n        return this.request<null>({\n            url: \"/v2/device-shared-keys\",\n            method: \"POST\",\n            headers: headerParams,\n            query: queryParameters,\n            formParams: formParams,\n            useFormData: useFormData,\n            contentTypes: contentTypes,\n            acceptTypes: acceptTypes,\n            requestOptions: requestOptions,\n            body: body,\n        }, callback);\n    }\n}\n"],"sourceRoot":"../../src"}