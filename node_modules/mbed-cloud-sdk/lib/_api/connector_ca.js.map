{"version":3,"sources":["_api/connector_ca.ts"],"names":[],"mappings":";AAAA,+BAA+B;AAC/B,iCAAiC;AACjC,sCAAsC;AACtC,yCAAyC;AACzC,2CAA2C;;;;;;;;;;;;AAoB3C,6CAA4C;AAC5C,+CAA8C;AA8I9C;;GAEG;AACH;IAA6C,2CAAO;IAApD;;IA+GA,CAAC;IA7GG;;;;;OAKG;IACI,4DAA0B,GAAjC,UAAkC,aAAqB,EAAE,IAAqC,EAAE,QAAuG,EAAE,cAAuC;QAC5O,mDAAmD;QACnD,EAAE,CAAC,CAAC,aAAa,KAAK,IAAI,IAAI,aAAa,KAAK,SAAS,CAAC,CAAC,CAAC;YACxD,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACX,QAAQ,CAAC,IAAI,mBAAQ,CAAC,6CAA6C,CAAC,CAAC,CAAC;YAC1E,CAAC;YACD,MAAM,CAAC;QACX,CAAC;QACD,0CAA0C;QAC1C,EAAE,CAAC,CAAC,IAAI,KAAK,IAAI,IAAI,IAAI,KAAK,SAAS,CAAC,CAAC,CAAC;YACtC,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACX,QAAQ,CAAC,IAAI,mBAAQ,CAAC,oCAAoC,CAAC,CAAC,CAAC;YACjE,CAAC;YACD,MAAM,CAAC;QACX,CAAC;QAED,IAAM,YAAY,GAAQ,EAAE,CAAC;QAC7B,EAAE,CAAC,CAAC,aAAa,KAAK,SAAS,CAAC,CAAC,CAAC;YAC9B,YAAY,CAAC,eAAe,CAAC,GAAG,aAAa,CAAC;QAClD,CAAC;QAED,IAAM,eAAe,GAAQ,EAAE,CAAC;QAEhC,wCAAwC;QACxC,IAAI,WAAW,GAAG,KAAK,CAAC;QACxB,IAAM,UAAU,GAAQ,EAAE,CAAC;QAE3B,oCAAoC;QACpC,IAAM,YAAY,GAAkB,EACnC,CAAC;QAEF,8BAA8B;QAC9B,IAAM,WAAW,GAAkB;YAC/B,kBAAkB;SACrB,CAAC;QAEF,MAAM,CAAC,IAAI,CAAC,OAAO,CAAmC;YAClD,GAAG,EAAE,4BAA4B;YACjC,MAAM,EAAE,MAAM;YACd,OAAO,EAAE,YAAY;YACrB,KAAK,EAAE,eAAe;YACtB,UAAU,EAAE,UAAU;YACtB,WAAW,EAAE,WAAW;YACxB,YAAY,EAAE,YAAY;YAC1B,WAAW,EAAE,WAAW;YACxB,cAAc,EAAE,cAAc;YAC9B,IAAI,EAAE,IAAI;SACb,EAAE,QAAQ,CAAC,CAAC;IACjB,CAAC;IACD;;;;;OAKG;IACI,yDAAuB,GAA9B,UAA+B,sBAA8B,EAAE,aAAqB,EAAE,QAAuG,EAAE,cAAuC;QAClO,4DAA4D;QAC5D,EAAE,CAAC,CAAC,sBAAsB,KAAK,IAAI,IAAI,sBAAsB,KAAK,SAAS,CAAC,CAAC,CAAC;YAC1E,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACX,QAAQ,CAAC,IAAI,mBAAQ,CAAC,sDAAsD,CAAC,CAAC,CAAC;YACnF,CAAC;YACD,MAAM,CAAC;QACX,CAAC;QACD,mDAAmD;QACnD,EAAE,CAAC,CAAC,aAAa,KAAK,IAAI,IAAI,aAAa,KAAK,SAAS,CAAC,CAAC,CAAC;YACxD,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACX,QAAQ,CAAC,IAAI,mBAAQ,CAAC,6CAA6C,CAAC,CAAC,CAAC;YAC1E,CAAC;YACD,MAAM,CAAC;QACX,CAAC;QAED,IAAM,YAAY,GAAQ,EAAE,CAAC;QAC7B,EAAE,CAAC,CAAC,aAAa,KAAK,SAAS,CAAC,CAAC,CAAC;YAC9B,YAAY,CAAC,eAAe,CAAC,GAAG,aAAa,CAAC;QAClD,CAAC;QAED,IAAM,eAAe,GAAQ,EAAE,CAAC;QAEhC,wCAAwC;QACxC,IAAI,WAAW,GAAG,KAAK,CAAC;QACxB,IAAM,UAAU,GAAQ,EAAE,CAAC;QAE3B,oCAAoC;QACpC,IAAM,YAAY,GAAkB,EACnC,CAAC;QAEF,8BAA8B;QAC9B,IAAM,WAAW,GAAkB;YAC/B,kBAAkB;SACrB,CAAC;QAEF,MAAM,CAAC,IAAI,CAAC,OAAO,CAAmC;YAClD,GAAG,EAAE,qDAAqD,CAAC,OAAO,CAAC,GAAG,GAAG,wBAAwB,GAAG,GAAG,EAAE,MAAM,CAAC,sBAAsB,CAAC,CAAC;YACxI,MAAM,EAAE,KAAK;YACb,OAAO,EAAE,YAAY;YACrB,KAAK,EAAE,eAAe;YACtB,UAAU,EAAE,UAAU;YACtB,WAAW,EAAE,WAAW;YACxB,YAAY,EAAE,YAAY;YAC1B,WAAW,EAAE,WAAW;YACxB,cAAc,EAAE,cAAc;SACjC,EAAE,QAAQ,CAAC,CAAC;IACjB,CAAC;IACL,8BAAC;AAAD,CA/GA,AA+GC,CA/G4C,iBAAO,GA+GnD;AA/GY,0DAAuB;AAgHpC;;GAEG;AACH;IAA0C,wCAAO;IAAjD;;IA4IA,CAAC;IA1IG;;;;OAIG;IACI,sDAAuB,GAA9B,UAA+B,aAAqB,EAAE,QAAuG,EAAE,cAAuC;QAClM,mDAAmD;QACnD,EAAE,CAAC,CAAC,aAAa,KAAK,IAAI,IAAI,aAAa,KAAK,SAAS,CAAC,CAAC,CAAC;YACxD,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACX,QAAQ,CAAC,IAAI,mBAAQ,CAAC,6CAA6C,CAAC,CAAC,CAAC;YAC1E,CAAC;YACD,MAAM,CAAC;QACX,CAAC;QAED,IAAM,YAAY,GAAQ,EAAE,CAAC;QAC7B,EAAE,CAAC,CAAC,aAAa,KAAK,SAAS,CAAC,CAAC,CAAC;YAC9B,YAAY,CAAC,eAAe,CAAC,GAAG,aAAa,CAAC;QAClD,CAAC;QAED,IAAM,eAAe,GAAQ,EAAE,CAAC;QAEhC,wCAAwC;QACxC,IAAI,WAAW,GAAG,KAAK,CAAC;QACxB,IAAM,UAAU,GAAQ,EAAE,CAAC;QAE3B,oCAAoC;QACpC,IAAM,YAAY,GAAkB,EACnC,CAAC;QAEF,8BAA8B;QAC9B,IAAM,WAAW,GAAkB;YAC/B,kBAAkB;SACrB,CAAC;QAEF,MAAM,CAAC,IAAI,CAAC,OAAO,CAAmC;YAClD,GAAG,EAAE,wBAAwB;YAC7B,MAAM,EAAE,KAAK;YACb,OAAO,EAAE,YAAY;YACrB,KAAK,EAAE,eAAe;YACtB,UAAU,EAAE,UAAU;YACtB,WAAW,EAAE,WAAW;YACxB,YAAY,EAAE,YAAY;YAC1B,WAAW,EAAE,WAAW;YACxB,cAAc,EAAE,cAAc;SACjC,EAAE,QAAQ,CAAC,CAAC;IACjB,CAAC;IACD;;;;OAIG;IACI,4DAA6B,GAApC,UAAqC,aAAqB,EAAE,QAAoG,EAAE,cAAuC;QACrM,mDAAmD;QACnD,EAAE,CAAC,CAAC,aAAa,KAAK,IAAI,IAAI,aAAa,KAAK,SAAS,CAAC,CAAC,CAAC;YACxD,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACX,QAAQ,CAAC,IAAI,mBAAQ,CAAC,6CAA6C,CAAC,CAAC,CAAC;YAC1E,CAAC;YACD,MAAM,CAAC;QACX,CAAC;QAED,IAAM,YAAY,GAAQ,EAAE,CAAC;QAC7B,EAAE,CAAC,CAAC,aAAa,KAAK,SAAS,CAAC,CAAC,CAAC;YAC9B,YAAY,CAAC,eAAe,CAAC,GAAG,aAAa,CAAC;QAClD,CAAC;QAED,IAAM,eAAe,GAAQ,EAAE,CAAC;QAEhC,wCAAwC;QACxC,IAAI,WAAW,GAAG,KAAK,CAAC;QACxB,IAAM,UAAU,GAAQ,EAAE,CAAC;QAE3B,oCAAoC;QACpC,IAAM,YAAY,GAAkB,EACnC,CAAC;QAEF,8BAA8B;QAC9B,IAAM,WAAW,GAAkB;YAC/B,kBAAkB;SACrB,CAAC;QAEF,MAAM,CAAC,IAAI,CAAC,OAAO,CAAgC;YAC/C,GAAG,EAAE,kCAAkC;YACvC,MAAM,EAAE,KAAK;YACb,OAAO,EAAE,YAAY;YACrB,KAAK,EAAE,eAAe;YACtB,UAAU,EAAE,UAAU;YACtB,WAAW,EAAE,WAAW;YACxB,YAAY,EAAE,YAAY;YAC1B,WAAW,EAAE,WAAW;YACxB,cAAc,EAAE,cAAc;SACjC,EAAE,QAAQ,CAAC,CAAC;IACjB,CAAC;IACD;;;;OAIG;IACI,wDAAyB,GAAhC,UAAiC,aAAqB,EAAE,QAAoG,EAAE,cAAuC;QACjM,mDAAmD;QACnD,EAAE,CAAC,CAAC,aAAa,KAAK,IAAI,IAAI,aAAa,KAAK,SAAS,CAAC,CAAC,CAAC;YACxD,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACX,QAAQ,CAAC,IAAI,mBAAQ,CAAC,6CAA6C,CAAC,CAAC,CAAC;YAC1E,CAAC;YACD,MAAM,CAAC;QACX,CAAC;QAED,IAAM,YAAY,GAAQ,EAAE,CAAC;QAC7B,EAAE,CAAC,CAAC,aAAa,KAAK,SAAS,CAAC,CAAC,CAAC;YAC9B,YAAY,CAAC,eAAe,CAAC,GAAG,aAAa,CAAC;QAClD,CAAC;QAED,IAAM,eAAe,GAAQ,EAAE,CAAC;QAEhC,wCAAwC;QACxC,IAAI,WAAW,GAAG,KAAK,CAAC;QACxB,IAAM,UAAU,GAAQ,EAAE,CAAC;QAE3B,oCAAoC;QACpC,IAAM,YAAY,GAAkB,EACnC,CAAC;QAEF,8BAA8B;QAC9B,IAAM,WAAW,GAAkB;YAC/B,kBAAkB;SACrB,CAAC;QAEF,MAAM,CAAC,IAAI,CAAC,OAAO,CAAgC;YAC/C,GAAG,EAAE,8BAA8B;YACnC,MAAM,EAAE,KAAK;YACb,OAAO,EAAE,YAAY;YACrB,KAAK,EAAE,eAAe;YACtB,UAAU,EAAE,UAAU;YACtB,WAAW,EAAE,WAAW;YACxB,YAAY,EAAE,YAAY;YAC1B,WAAW,EAAE,WAAW;YACxB,cAAc,EAAE,cAAc;SACjC,EAAE,QAAQ,CAAC,CAAC;IACjB,CAAC;IACL,2BAAC;AAAD,CA5IA,AA4IC,CA5IyC,iBAAO,GA4IhD;AA5IY,oDAAoB","file":"connector_ca.js","sourcesContent":["/* tslint:disable:array-type */\n/* tslint:disable:no-namespace */\n/* tslint:disable:no-string-literal */\n/* tslint:disable:max-classes-per-file */\n/* tslint:disable:no-trailing-whitespace */\n\n// ===============================================\n// This file is autogenerated - Please do not edit\n// Tracks base typescript-fetch mustache 01/02/17\n// ===============================================\n\n/**\n * Connect CA API\n * mbed Cloud Connect CA API allows services to get device credentials.\n *\n * OpenAPI spec version: 3\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nimport superagent = require(\"superagent\");\nimport { ApiBase } from \"../common/apiBase\";\nimport { SDKError } from \"../common/sdkError\";\n\nexport interface AllServerCredentialsResponseData {\n    \"bootstrap\"?: CredentialsResponseData;\n    \"lwm2m\"?: CredentialsResponseData;\n}\n\nexport interface CredentialsResponseData {\n    /**\n     * PEM format X.509 server certificate that will be used to validate the server certificate that will be received during the TLS/DTLS handshake.\n     */\n    \"certificate\"?: string;\n    /**\n     * Server URI to which the client needs to connect to.\n     */\n    \"url\"?: string;\n}\n\nexport interface DeveloperCertificateRequestData {\n    /**\n     * Description for the developer certificate. There is a limit on the length of the description. Please see [TrustedCertificateReq](/docs/v1.2/api-references/account-management-api.html#trustedcertificatereq)\n     */\n    \"description\"?: string;\n    /**\n     * Name of the developer certificate, must be unique. There is a limit on the length of the name. Please see [TrustedCertificateReq](/docs/v1.2/api-references/account-management-api.html#trustedcertificatereq)\n     */\n    \"name\": string;\n}\n\nexport interface DeveloperCertificateResponseData {\n    /**\n     * account to which the developer certificate belongs\n     */\n    \"account_id\"?: string;\n    /**\n     * Creation UTC time RFC3339.\n     */\n    \"created_at\"?: Date;\n    /**\n     * Description for the developer certificate.\n     */\n    \"description\"?: string;\n    /**\n     * PEM format X.509 developer certificate.\n     */\n    \"developer_certificate\"?: string;\n    /**\n     * PEM format developer private key associated to the certificate.\n     */\n    \"developer_private_key\"?: string;\n    /**\n     * API resource entity version.\n     */\n    \"etag\"?: string;\n    /**\n     * mUUID that uniquely identifies the developer certificate.\n     */\n    \"id\"?: string;\n    /**\n     * Name of the developer certificate.\n     */\n    \"name\"?: string;\n    /**\n     * Entity name, always 'trusted-cert'\n     */\n    \"object\"?: string;\n    /**\n     * Content of the security.c file that will be flashed into the device to provide the security credentials\n     */\n    \"security_file_content\"?: string;\n}\n\nexport namespace ErrorResponse {\n    export type CodeEnum = \"400\" | \"401\" | \"404\";\n    export type ObjectEnum = \"error\";\n    export type TypeEnum = \"validation_error\" | \"invalid_token\" | \"invalid_apikey\" | \"reauth_required\" | \"access_denied\" | \"account_limit_exceeded\" | \"not_found\" | \"method_not_supported\" | \"not_acceptable\" | \"duplicate\" | \"precondition_failed\" | \"unsupported_media_type\" | \"rate_limit_exceeded\" | \"internal_server_error\" | \"system_unavailable\";\n}\nexport interface ErrorResponse {\n    /**\n     * Response code.\n     */\n    \"code\"?: ErrorResponse.CodeEnum;\n    /**\n     * Failed input fields during request object validation.\n     */\n    \"fields\"?: Array<Field>;\n    /**\n     * A human readable message with detailed info.\n     */\n    \"message\"?: string;\n    /**\n     * Entity name, always 'error'.\n     */\n    \"object\"?: ErrorResponse.ObjectEnum;\n    /**\n     * Request ID (muuid).\n     */\n    \"request_id\"?: string;\n    /**\n     * Error type.\n     */\n    \"type\"?: ErrorResponse.TypeEnum;\n}\n\nexport interface Field {\n    /**\n     * A message describing the error situation.\n     */\n    \"message\"?: string;\n    /**\n     * The name of the erroneous field.\n     */\n    \"name\"?: string;\n}\n\nexport interface ServerCredentialsResponseData {\n    /**\n     * Creation UTC time RFC3339.\n     */\n    \"created_at\"?: Date;\n    /**\n     * API resource entity version.\n     */\n    \"etag\"?: string;\n    /**\n     * mUUID that uniquely identifies the entity.\n     */\n    \"id\"?: string;\n    /**\n     * Entity name, always 'server-credentials'\n     */\n    \"object\"?: string;\n    /**\n     * PEM format X.509 server certificate that will be used to validate the server certificate that will be received during the TLS/DTLS handshake.\n     */\n    \"server_certificate\"?: string;\n    /**\n     * Server URI to which the client needs to connect to.\n     */\n    \"server_uri\"?: string;\n}\n\n/**\n * DeveloperCertificateApi\n */\nexport class DeveloperCertificateApi extends ApiBase {\n\n    /**\n     * Create a new developer certificate to connect to the bootstrap server.\n     * This REST API is intended to be used by customers to get a developer certificate (a certificate that can be flashed into multiple devices to connect to bootstrap server).  **Note:** The number of developer certificates allowed per account is limited. Please see [Using your own certificate authority](/docs/v1.2/mbed-cloud-deploy/instructions-for-factory-setup-and-device-provision.html#using-your-own-certificate-authority-with-mbed-cloud).  **Example usage:** curl -X POST \\&quot;http://api.us-east-1.mbedcloud.com/v3/developer-certificates\\&quot; -H \\&quot;accept: application/json\\&quot; -H \\&quot;Authorization: Bearer THE_ACCESS_TOKEN\\&quot; -H \\&quot;content-type: application/json\\&quot; -d \\&quot;{ \\\\\\&quot;name\\\\\\&quot;: \\\\\\&quot;THE_CERTIFICATE_NAME\\\\\\&quot;, \\\\\\&quot;description\\\\\\&quot;: \\\\\\&quot;THE_CERTIFICATE_DESCRIPTION\\\\\\&quot;}\\&quot;         \n     * @param authorization Bearer {Access Token}. \n     * @param body \n     */\n    public createDeveloperCertificate(authorization: string, body: DeveloperCertificateRequestData, callback?: (error: any, data?: DeveloperCertificateResponseData, response?: superagent.Response) => any, requestOptions?: { [key: string]: any }): superagent.SuperAgentRequest {\n        // verify required parameter \"authorization\" is set\n        if (authorization === null || authorization === undefined) {\n            if (callback) {\n                callback(new SDKError(\"Required parameter 'authorization' missing.\"));\n            }\n            return;\n        }\n        // verify required parameter \"body\" is set\n        if (body === null || body === undefined) {\n            if (callback) {\n                callback(new SDKError(\"Required parameter 'body' missing.\"));\n            }\n            return;\n        }\n\n        const headerParams: any = {};\n        if (authorization !== undefined) {\n            headerParams[\"Authorization\"] = authorization;\n        }\n\n        const queryParameters: any = {};\n\n        // tslint:disable-next-line:prefer-const\n        let useFormData = false;\n        const formParams: any = {};\n\n        // Determine the Content-Type header\n        const contentTypes: Array<string> = [\n        ];\n\n        // Determine the Accept header\n        const acceptTypes: Array<string> = [\n            \"application/json\"\n        ];\n\n        return this.request<DeveloperCertificateResponseData>({\n            url: \"/v3/developer-certificates\",\n            method: \"POST\",\n            headers: headerParams,\n            query: queryParameters,\n            formParams: formParams,\n            useFormData: useFormData,\n            contentTypes: contentTypes,\n            acceptTypes: acceptTypes,\n            requestOptions: requestOptions,\n            body: body,\n        }, callback);\n    }\n    /**\n     * Fetch an existing developer certificate to connect to the bootstrap server.\n     * This REST API is intended to be used by customers to fetch an existing developer certificate (a certificate that can be flashed into multiple devices to connect to bootstrap server).  **Example usage:** curl -X GET \\&quot;http://api.us-east-1.mbedcloud.com/v3/developer-certificates/THE_CERTIFICATE_ID\\&quot; -H \\&quot;accept: application/json\\&quot; -H \\&quot;Authorization: Bearer THE_ACCESS_TOKEN\\&quot; \n     * @param developerCertificateId A unique identifier for the developer certificate. \n     * @param authorization Bearer {Access Token}. \n     */\n    public getDeveloperCertificate(developerCertificateId: string, authorization: string, callback?: (error: any, data?: DeveloperCertificateResponseData, response?: superagent.Response) => any, requestOptions?: { [key: string]: any }): superagent.SuperAgentRequest {\n        // verify required parameter \"developerCertificateId\" is set\n        if (developerCertificateId === null || developerCertificateId === undefined) {\n            if (callback) {\n                callback(new SDKError(\"Required parameter 'developerCertificateId' missing.\"));\n            }\n            return;\n        }\n        // verify required parameter \"authorization\" is set\n        if (authorization === null || authorization === undefined) {\n            if (callback) {\n                callback(new SDKError(\"Required parameter 'authorization' missing.\"));\n            }\n            return;\n        }\n\n        const headerParams: any = {};\n        if (authorization !== undefined) {\n            headerParams[\"Authorization\"] = authorization;\n        }\n\n        const queryParameters: any = {};\n\n        // tslint:disable-next-line:prefer-const\n        let useFormData = false;\n        const formParams: any = {};\n\n        // Determine the Content-Type header\n        const contentTypes: Array<string> = [\n        ];\n\n        // Determine the Accept header\n        const acceptTypes: Array<string> = [\n            \"application/json\"\n        ];\n\n        return this.request<DeveloperCertificateResponseData>({\n            url: \"/v3/developer-certificates/{developerCertificateId}\".replace(\"{\" + \"developerCertificateId\" + \"}\", String(developerCertificateId)),\n            method: \"GET\",\n            headers: headerParams,\n            query: queryParameters,\n            formParams: formParams,\n            useFormData: useFormData,\n            contentTypes: contentTypes,\n            acceptTypes: acceptTypes,\n            requestOptions: requestOptions,\n        }, callback);\n    }\n}\n/**\n * ServerCredentialsApi\n */\nexport class ServerCredentialsApi extends ApiBase {\n\n    /**\n     * Fetch all (Bootstrap and LWM2M) server credentials.\n     * This REST API is intended to be used by customers to fetch all (Bootstrap and LWM2M) server credentials that they will need to use with their clients to connect to bootstrap or LWM2M server.  **Example usage:** curl -X GET \\&quot;http://api.us-east-1.mbedcloud.com/v3/server-credentials\\&quot; -H \\&quot;accept: application/json\\&quot; -H \\&quot;Authorization: Bearer THE_ACCESS_TOKEN\\&quot;         \n     * @param authorization Bearer {Access Token}. \n     */\n    public getAllServerCredentials(authorization: string, callback?: (error: any, data?: AllServerCredentialsResponseData, response?: superagent.Response) => any, requestOptions?: { [key: string]: any }): superagent.SuperAgentRequest {\n        // verify required parameter \"authorization\" is set\n        if (authorization === null || authorization === undefined) {\n            if (callback) {\n                callback(new SDKError(\"Required parameter 'authorization' missing.\"));\n            }\n            return;\n        }\n\n        const headerParams: any = {};\n        if (authorization !== undefined) {\n            headerParams[\"Authorization\"] = authorization;\n        }\n\n        const queryParameters: any = {};\n\n        // tslint:disable-next-line:prefer-const\n        let useFormData = false;\n        const formParams: any = {};\n\n        // Determine the Content-Type header\n        const contentTypes: Array<string> = [\n        ];\n\n        // Determine the Accept header\n        const acceptTypes: Array<string> = [\n            \"application/json\"\n        ];\n\n        return this.request<AllServerCredentialsResponseData>({\n            url: \"/v3/server-credentials\",\n            method: \"GET\",\n            headers: headerParams,\n            query: queryParameters,\n            formParams: formParams,\n            useFormData: useFormData,\n            contentTypes: contentTypes,\n            acceptTypes: acceptTypes,\n            requestOptions: requestOptions,\n        }, callback);\n    }\n    /**\n     * Fetch bootstrap server credentials.\n     * This REST API is intended to be used by customers to fetch bootstrap server credentials that they will need to use with their clients to connect to bootstrap server.  **Example usage:** curl -X GET \\&quot;http://api.us-east-1.mbedcloud.com/v3/server-credentials/bootstrap\\&quot; -H \\&quot;accept: application/json\\&quot; -H \\&quot;Authorization: Bearer THE_ACCESS_TOKEN\\&quot; \n     * @param authorization Bearer {Access Token}. \n     */\n    public getBootstrapServerCredentials(authorization: string, callback?: (error: any, data?: ServerCredentialsResponseData, response?: superagent.Response) => any, requestOptions?: { [key: string]: any }): superagent.SuperAgentRequest {\n        // verify required parameter \"authorization\" is set\n        if (authorization === null || authorization === undefined) {\n            if (callback) {\n                callback(new SDKError(\"Required parameter 'authorization' missing.\"));\n            }\n            return;\n        }\n\n        const headerParams: any = {};\n        if (authorization !== undefined) {\n            headerParams[\"Authorization\"] = authorization;\n        }\n\n        const queryParameters: any = {};\n\n        // tslint:disable-next-line:prefer-const\n        let useFormData = false;\n        const formParams: any = {};\n\n        // Determine the Content-Type header\n        const contentTypes: Array<string> = [\n        ];\n\n        // Determine the Accept header\n        const acceptTypes: Array<string> = [\n            \"application/json\"\n        ];\n\n        return this.request<ServerCredentialsResponseData>({\n            url: \"/v3/server-credentials/bootstrap\",\n            method: \"GET\",\n            headers: headerParams,\n            query: queryParameters,\n            formParams: formParams,\n            useFormData: useFormData,\n            contentTypes: contentTypes,\n            acceptTypes: acceptTypes,\n            requestOptions: requestOptions,\n        }, callback);\n    }\n    /**\n     * Fetch LWM2M server credentials.\n     * This REST API is intended to be used by customers to fetch LWM2M server credentials that they will need to use with their clients to connect to LWM2M server.  **Example usage:** curl -X GET \\&quot;http://api.us-east-1.mbedcloud.com/v3/server-credentials/lwm2m\\&quot; -H \\&quot;accept: application/json\\&quot; -H \\&quot;Authorization: Bearer THE_ACCESS_TOKEN\\&quot; \n     * @param authorization Bearer {Access Token}. \n     */\n    public getL2M2MServerCredentials(authorization: string, callback?: (error: any, data?: ServerCredentialsResponseData, response?: superagent.Response) => any, requestOptions?: { [key: string]: any }): superagent.SuperAgentRequest {\n        // verify required parameter \"authorization\" is set\n        if (authorization === null || authorization === undefined) {\n            if (callback) {\n                callback(new SDKError(\"Required parameter 'authorization' missing.\"));\n            }\n            return;\n        }\n\n        const headerParams: any = {};\n        if (authorization !== undefined) {\n            headerParams[\"Authorization\"] = authorization;\n        }\n\n        const queryParameters: any = {};\n\n        // tslint:disable-next-line:prefer-const\n        let useFormData = false;\n        const formParams: any = {};\n\n        // Determine the Content-Type header\n        const contentTypes: Array<string> = [\n        ];\n\n        // Determine the Accept header\n        const acceptTypes: Array<string> = [\n            \"application/json\"\n        ];\n\n        return this.request<ServerCredentialsResponseData>({\n            url: \"/v3/server-credentials/lwm2m\",\n            method: \"GET\",\n            headers: headerParams,\n            query: queryParameters,\n            formParams: formParams,\n            useFormData: useFormData,\n            contentTypes: contentTypes,\n            acceptTypes: acceptTypes,\n            requestOptions: requestOptions,\n        }, callback);\n    }\n}\n"],"sourceRoot":"../../src"}