{"version":3,"sources":["_api/enrollment.ts"],"names":[],"mappings":"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","file":"enrollment.js","sourcesContent":["/* tslint:disable:array-type */\n/* tslint:disable:no-namespace */\n/* tslint:disable:no-string-literal */\n/* tslint:disable:max-classes-per-file */\n/* tslint:disable:no-trailing-whitespace */\n\n// ===============================================\n// This file is autogenerated - Please do not edit\n// Tracks base typescript-fetch mustache 01/02/17\n// ===============================================\n\n/**\n * Enrollment API\n * Mbed Cloud Connect Enrollment Service allows users to claim the ownership of a device which is not yet assigned to an account. A device without an assigned account can be a device purchased from the open market (OEM dealer) or a device transferred from an account to another. More information in [Device ownership: First-to-claim](https://cloud.mbed.com/docs/current/connecting/device-ownership.html) document. \n *\n * OpenAPI spec version: 3\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nimport superagent = require(\"superagent\");\nimport { ApiBase } from \"../common/apiBase\";\nimport { SDKError } from \"../common/sdkError\";\n\nexport namespace BulkResponse {\n    export type ObjectEnum = \"enrollment-identity-bulk-uploads\";\n    export type StatusEnum = \"new\" | \"processing\" | \"completed\";\n}\nexport interface BulkResponse {\n    /**\n     * ID\n     */\n    \"account_id\": string;\n    /**\n     * The time of completing the bulk creation task. \n     */\n    \"completed_at\"?: Date;\n    /**\n     * The time of receiving the bulk creation task. \n     */\n    \"created_at\": Date;\n    /**\n     * The number of enrollment identities with failed processing. \n     */\n    \"errors_count\": number;\n    \"errors_report_file\"?: string;\n    /**\n     * etag\n     */\n    \"etag\": string;\n    \"full_report_file\"?: string;\n    /**\n     * Bulk ID\n     */\n    \"id\": string;\n    \"object\": BulkResponse.ObjectEnum;\n    /**\n     * The number of enrollment identities processed until now. \n     */\n    \"processed_count\": number;\n    /**\n     * The state of the process is 'new' at the time of creation. If the creation is still in progress, the state is shown as 'processing'. When the request has been fully processed, the state changes to 'completed'. \n     */\n    \"status\": BulkResponse.StatusEnum;\n    /**\n     * Total number of enrollment identities found in the input CSV. \n     */\n    \"total_count\": number;\n}\n\nexport interface EnrollmentId {\n    /**\n     * Enrollment identity.\n     */\n    \"enrollment_identity\": string;\n}\n\nexport namespace EnrollmentIdentities {\n    export type ObjectEnum = \"list\";\n    export type OrderEnum = \"ASC\" | \"DESC\";\n}\nexport interface EnrollmentIdentities {\n    /**\n     * ID\n     */\n    \"after\": string;\n    \"data\": Array<EnrollmentIdentity>;\n    \"has_more\": boolean;\n    /**\n     * Range 2-1000, or default.\n     */\n    \"limit\": number;\n    \"object\": EnrollmentIdentities.ObjectEnum;\n    \"order\": EnrollmentIdentities.OrderEnum;\n    \"total_count\": number;\n}\n\nexport namespace EnrollmentIdentity {\n    export type ObjectEnum = \"enrollment\";\n}\nexport interface EnrollmentIdentity {\n    /**\n     * ID\n     */\n    \"account_id\": string;\n    /**\n     * The time of claiming the device to be assigned to the account.\n     */\n    \"claimed_at\": Date;\n    /**\n     * The time of the enrollment identity creation.\n     */\n    \"created_at\": Date;\n    /**\n     * The ID of the device in the Device Directory once it has been registered.\n     */\n    \"enrolled_device_id\": string;\n    /**\n     * Enrollment identity.\n     */\n    \"enrollment_identity\": string;\n    \"etag\": string;\n    /**\n     * The enrollment claim expiration time. If the device does not connect to Mbed Cloud before the expiration, the claim is removed without a separate notice\n     */\n    \"expires_at\": Date;\n    /**\n     * Enrollment identity.\n     */\n    \"id\": string;\n    \"object\": EnrollmentIdentity.ObjectEnum;\n}\n\nexport namespace ErrorResponse {\n    export type CodeEnum = \"400\" | \"401\" | \"404\";\n    export type ObjectEnum = \"error\";\n    export type TypeEnum = \"validation_error\" | \"invalid_token\" | \"invalid_apikey\" | \"reauth_required\" | \"access_denied\" | \"account_limit_exceeded\" | \"not_found\" | \"method_not_supported\" | \"not_acceptable\" | \"duplicate\" | \"precondition_failed\" | \"unsupported_media_type\" | \"rate_limit_exceeded\" | \"internal_server_error\" | \"system_unavailable\";\n}\nexport interface ErrorResponse {\n    /**\n     * Response code.\n     */\n    \"code\"?: ErrorResponse.CodeEnum;\n    /**\n     * Failed input fields during request object validation.\n     */\n    \"fields\"?: Array<Field>;\n    /**\n     * A human readable message with detailed info.\n     */\n    \"message\"?: string;\n    /**\n     * Entity name, always 'error'.\n     */\n    \"object\"?: ErrorResponse.ObjectEnum;\n    /**\n     * Request ID.\n     */\n    \"request_id\"?: string;\n    /**\n     * Error type.\n     */\n    \"type\"?: ErrorResponse.TypeEnum;\n}\n\nexport interface Field {\n    /**\n     * A message describing the error situation.\n     */\n    \"message\"?: string;\n    /**\n     * The name of the erroneous field.\n     */\n    \"name\"?: string;\n}\n\n/**\n * PublicAPIApi\n */\nexport class PublicAPIApi extends ApiBase {\n\n    /**\n     * Bulk upload\n     * With bulk upload you can upload a CSV file containing a number of enrollment IDs.  **Example usage:** &#x60;&#x60;&#x60; curl -X POST \\\\ -H &#39;Authorization: Bearer &lt;valid access token&gt;&#39; \\\\ -F &#39;enrollment_identities&#x3D;@/path/to/enrollments/enrollments.csv&#39; \\\\ https://api.us-east-1.mbedcloud.com/v3/device-enrollments-bulk-uploads  &#x60;&#x60;&#x60; **Example csv File:** 1. First line is assumed to be the header. Content of the header is not validated. 2. Each line can contain comma separated values where 1st value is always assumed to be the Enrollment ID. 3. Only one enrollment ID is expected in one line. 4. Valid Enrollments begins with A followed by a - and 95 charactors in the format as given below. 5. Valid Enrollment identities may be enclosed with in quotes. 6. UTF-8 encoding is expected.  &#x60;&#x60;&#x60; \\&quot;enrollment_identity\\&quot; \\&quot;A-4E:63:2D:AE:14:BC:D1:09:77:21:95:44:ED:34:06:57:1E:03:B1:EF:0E:F2:59:44:71:93:23:22:15:43:23:12\\&quot;, \\&quot;A-4E:63:2D:AE:14:BC:D1:09:77:21:95:44:ED:34:06:57:1E:03:B1:EF:0E:F2:59:25:48:44:71:22:15:43:23:12\\&quot;,  &#x60;&#x60;&#x60; \n     * @param enrollmentIdentities Enrollment identities CSV file. Maximum file size is 10MB. \n     */\n    public createBulkDeviceEnrollment(enrollmentIdentities: any, callback?: (error: any, data?: BulkResponse, response?: superagent.Response) => any, requestOptions?: { [key: string]: any }): superagent.SuperAgentRequest {\n        // verify required parameter \"enrollmentIdentities\" is set\n        if (enrollmentIdentities === null || enrollmentIdentities === undefined) {\n            if (callback) {\n                callback(new SDKError(\"Required parameter 'enrollmentIdentities' missing.\"));\n            }\n            return;\n        }\n\n        const headerParams: any = {};\n\n        const queryParameters: any = {};\n\n        // tslint:disable-next-line:prefer-const\n        let useFormData = false;\n        const formParams: any = {};\n\n        if (enrollmentIdentities !== undefined) {\n            formParams[\"enrollment_identities\"] = enrollmentIdentities;\n        }\n        useFormData = true;\n\n        // Determine the Content-Type header\n        const contentTypes: Array<string> = [\n            \"multipart/form-data\"\n        ];\n\n        // Determine the Accept header\n        const acceptTypes: Array<string> = [\n            \"application/json\"\n        ];\n\n        return this.request<BulkResponse>({\n            url: \"/v3/device-enrollments-bulk-uploads\",\n            method: \"POST\",\n            headers: headerParams,\n            query: queryParameters,\n            formParams: formParams,\n            useFormData: useFormData,\n            contentTypes: contentTypes,\n            acceptTypes: acceptTypes,\n            requestOptions: requestOptions,\n        }, callback);\n    }\n    /**\n     * Place an enrollment claim for one or several devices.\n     * When the device connects to the bootstrap server and provides the enrollment ID, it will be assigned to your account. &lt;br&gt; **Example usage:** &#x60;&#x60;&#x60; curl -X POST \\\\ -H &#39;Authorization: Bearer &lt;valid access token&gt;&#39; \\\\ -H &#39;content-type: application/json&#39; \\\\ https://api.us-east-1.mbedcloud.com/v3/device-enrollments \\\\ -d &#39;{\\&quot;enrollment_identity\\&quot;: \\&quot;A-35:e7:72:8a:07:50:3b:3d:75:96:57:52:72:41:0d:78:cc:c6:e5:53:48:c6:65:58:5b:fa:af:4d:2d:73:95:c5\\&quot;}&#39; &#x60;&#x60;&#x60; \n     * @param enrollmentIdentity \n     */\n    public createDeviceEnrollment(enrollmentIdentity: EnrollmentId, callback?: (error: any, data?: EnrollmentIdentity, response?: superagent.Response) => any, requestOptions?: { [key: string]: any }): superagent.SuperAgentRequest {\n        // verify required parameter \"enrollmentIdentity\" is set\n        if (enrollmentIdentity === null || enrollmentIdentity === undefined) {\n            if (callback) {\n                callback(new SDKError(\"Required parameter 'enrollmentIdentity' missing.\"));\n            }\n            return;\n        }\n\n        const headerParams: any = {};\n\n        const queryParameters: any = {};\n\n        // tslint:disable-next-line:prefer-const\n        let useFormData = false;\n        const formParams: any = {};\n\n        // Determine the Content-Type header\n        const contentTypes: Array<string> = [\n            \"application/json\"\n        ];\n\n        // Determine the Accept header\n        const acceptTypes: Array<string> = [\n            \"application/json\"\n        ];\n\n        return this.request<EnrollmentIdentity>({\n            url: \"/v3/device-enrollments\",\n            method: \"POST\",\n            headers: headerParams,\n            query: queryParameters,\n            formParams: formParams,\n            useFormData: useFormData,\n            contentTypes: contentTypes,\n            acceptTypes: acceptTypes,\n            requestOptions: requestOptions,\n            body: enrollmentIdentity,\n        }, callback);\n    }\n    /**\n     * Delete an enrollment by ID.\n     * To free a device from your account you can delete the enrollment claim. To bypass the device ownership, you need to delete the enrollment and do a factory reset for the device. For more information, see [Transferring the ownership using First-to-Claim](/docs/current/connecting/device-ownership.html). &lt;br&gt; **Example usage:** &#x60;&#x60;&#x60; curl -X DELETE \\\\ -H &#39;Authorization: Bearer &lt;valid access token&gt;&#39; \\\\ https://api.us-east-1.mbedcloud.com/v3/device-enrollments/{id} &#x60;&#x60;&#x60; \n     * @param id Enrollment identity.\n     */\n    public deleteDeviceEnrollment(id: string, callback?: (error: any, data?: any, response?: superagent.Response) => any, requestOptions?: { [key: string]: any }): superagent.SuperAgentRequest {\n        // verify required parameter \"id\" is set\n        if (id === null || id === undefined) {\n            if (callback) {\n                callback(new SDKError(\"Required parameter 'id' missing.\"));\n            }\n            return;\n        }\n\n        const headerParams: any = {};\n\n        const queryParameters: any = {};\n\n        // tslint:disable-next-line:prefer-const\n        let useFormData = false;\n        const formParams: any = {};\n\n        // Determine the Content-Type header\n        const contentTypes: Array<string> = [\n            \"application/json\"\n        ];\n\n        // Determine the Accept header\n        const acceptTypes: Array<string> = [\n            \"application/json\"\n        ];\n\n        return this.request<null>({\n            url: \"/v3/device-enrollments/{id}\".replace(\"{\" + \"id\" + \"}\", String(id)),\n            method: \"DELETE\",\n            headers: headerParams,\n            query: queryParameters,\n            formParams: formParams,\n            useFormData: useFormData,\n            contentTypes: contentTypes,\n            acceptTypes: acceptTypes,\n            requestOptions: requestOptions,\n        }, callback);\n    }\n    /**\n     * Get bulk upload entity\n     * Provides info about bulk upload for the given ID. For example bulk status and processed count of enrollment identities. Info includes also links for the bulk upload reports. **Example usage:** &#x60;&#x60;&#x60; curl -X GET \\\\ -H &#39;Authorization: Bearer &lt;valid access token&gt;&#39; \\\\ https://api.us-east-1.mbedcloud.com/v3/device-enrollments-bulk-uploads/{id} &#x60;&#x60;&#x60; \n     * @param id Bulk create task entity ID\n     */\n    public getBulkDeviceEnrollment(id: string, callback?: (error: any, data?: BulkResponse, response?: superagent.Response) => any, requestOptions?: { [key: string]: any }): superagent.SuperAgentRequest {\n        // verify required parameter \"id\" is set\n        if (id === null || id === undefined) {\n            if (callback) {\n                callback(new SDKError(\"Required parameter 'id' missing.\"));\n            }\n            return;\n        }\n\n        const headerParams: any = {};\n\n        const queryParameters: any = {};\n\n        // tslint:disable-next-line:prefer-const\n        let useFormData = false;\n        const formParams: any = {};\n\n        // Determine the Content-Type header\n        const contentTypes: Array<string> = [\n            \"application/json\"\n        ];\n\n        // Determine the Accept header\n        const acceptTypes: Array<string> = [\n            \"application/json\"\n        ];\n\n        return this.request<BulkResponse>({\n            url: \"/v3/device-enrollments-bulk-uploads/{id}\".replace(\"{\" + \"id\" + \"}\", String(id)),\n            method: \"GET\",\n            headers: headerParams,\n            query: queryParameters,\n            formParams: formParams,\n            useFormData: useFormData,\n            contentTypes: contentTypes,\n            acceptTypes: acceptTypes,\n            requestOptions: requestOptions,\n        }, callback);\n    }\n    /**\n     * Get details of an enrollment by ID.\n     * To check the enrollment info in detail, for example date of claim and expiration date. **Example usage:** &#x60;&#x60;&#x60; curl -X GET \\\\ -H &#39;Authorization: Bearer &lt;valid access token&gt;&#39; \\\\ https://api.us-east-1.mbedcloud.com/v3/device-enrollments/{id} &#x60;&#x60;&#x60; \n     * @param id Enrollment identity.\n     */\n    public getDeviceEnrollment(id: string, callback?: (error: any, data?: EnrollmentIdentity, response?: superagent.Response) => any, requestOptions?: { [key: string]: any }): superagent.SuperAgentRequest {\n        // verify required parameter \"id\" is set\n        if (id === null || id === undefined) {\n            if (callback) {\n                callback(new SDKError(\"Required parameter 'id' missing.\"));\n            }\n            return;\n        }\n\n        const headerParams: any = {};\n\n        const queryParameters: any = {};\n\n        // tslint:disable-next-line:prefer-const\n        let useFormData = false;\n        const formParams: any = {};\n\n        // Determine the Content-Type header\n        const contentTypes: Array<string> = [\n            \"application/json\"\n        ];\n\n        // Determine the Accept header\n        const acceptTypes: Array<string> = [\n            \"application/json\"\n        ];\n\n        return this.request<EnrollmentIdentity>({\n            url: \"/v3/device-enrollments/{id}\".replace(\"{\" + \"id\" + \"}\", String(id)),\n            method: \"GET\",\n            headers: headerParams,\n            query: queryParameters,\n            formParams: formParams,\n            useFormData: useFormData,\n            contentTypes: contentTypes,\n            acceptTypes: acceptTypes,\n            requestOptions: requestOptions,\n        }, callback);\n    }\n    /**\n     * Get enrollment list.\n     * Provides a list of pending and claimed enrollments. **Example usage:** &#x60;&#x60;&#x60; curl -X GET \\\\ -H &#39;Authorization: Bearer &lt;valid access token&gt;&#39; \\\\ https://api.us-east-1.mbedcloud.com/v3/device-enrollments &#x60;&#x60;&#x60; With query parameters: &#x60;&#x60;&#x60; curl -X GET \\\\ -H &#39;Authorization: Bearer &lt;valid access token&gt;&#39; \\\\ &#39;https://api.us-east-1.mbedcloud.com/v3/device-enrollments?limit&#x3D;10&#39; &#x60;&#x60;&#x60; \n     * @param limit Number of results to be returned. Between 2 and 1000, inclusive.\n     * @param after Entity ID to fetch after.\n     * @param order ASC or DESC\n     * @param include Comma-separated additional data to return. Currently supported: total_count.\n     */\n    public getDeviceEnrollments(limit?: number, after?: string, order?: string, include?: string, callback?: (error: any, data?: EnrollmentIdentities, response?: superagent.Response) => any, requestOptions?: { [key: string]: any }): superagent.SuperAgentRequest {\n\n        const headerParams: any = {};\n\n        const queryParameters: any = {};\n        if (limit !== undefined) {\n            queryParameters[\"limit\"] = limit;\n        }\n        if (after !== undefined) {\n            queryParameters[\"after\"] = after;\n        }\n        if (order !== undefined) {\n            queryParameters[\"order\"] = order;\n        }\n        if (include !== undefined) {\n            queryParameters[\"include\"] = include;\n        }\n\n        // tslint:disable-next-line:prefer-const\n        let useFormData = false;\n        const formParams: any = {};\n\n        // Determine the Content-Type header\n        const contentTypes: Array<string> = [\n            \"application/json\"\n        ];\n\n        // Determine the Accept header\n        const acceptTypes: Array<string> = [\n            \"application/json\"\n        ];\n\n        return this.request<EnrollmentIdentities>({\n            url: \"/v3/device-enrollments\",\n            method: \"GET\",\n            headers: headerParams,\n            query: queryParameters,\n            formParams: formParams,\n            useFormData: useFormData,\n            contentTypes: contentTypes,\n            acceptTypes: acceptTypes,\n            requestOptions: requestOptions,\n        }, callback);\n    }\n}\n"],"sourceRoot":"../../src"}