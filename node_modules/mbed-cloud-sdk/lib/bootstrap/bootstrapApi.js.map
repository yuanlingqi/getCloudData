{"version":3,"sources":["bootstrap/bootstrapApi.ts"],"names":[],"mappings":"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","file":"bootstrapApi.js","sourcesContent":["/*\n * Mbed Cloud JavaScript SDK\n * Copyright Arm Limited 2018\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { apiWrapper, asyncStyle } from \"../common/functions\";\nimport { Endpoints } from \"./endpoints\";\nimport { CallbackFn, ConnectionOptions } from \"../common/interfaces\";\nimport { AddPreSharedKey, PskListOptions } from \"./types\";\nimport { PreSharedKey } from \"./models/preSharedKey\";\nimport { mapToSDK, mapToSpec, mapFrom } from \"./models/preSharedKeyAdapter\";\nimport { ApiMetadata } from \"../common/apiMetadata\";\nimport { ListResponse } from \"../common/listResponse\";\n\nexport class BootstrapApi {\n    private readonly _endpoints: Endpoints;\n\n    /**\n     * The API can be initalized with a .env file in the wroking directory with the following values\n     *\n     * MBED_CLOUD_SDK_API_KEY=<Mbed Cloud Api Key>\n     *\n     * and optionally\n     *\n     * MBED_CLOUD_SDK_HOST=<your host> (defaults to https://api.us-east-1.mbedcloud.com)\n     *\n     * OR\n     * This API is initialized with [ConnectionOptions](../interfaces/connectionoptions.html).\n     *\n     * To create an instance of this API in [Node.js](https://nodejs.org):\n     *\n     * ```JavaScript\n     * var MbedCloudSDK = require(\"mbed-cloud-sdk\");\n     *\n     * var bootstrap = new MbedCloudSDK.BootstrapApi({\n     *     apiKey: \"<Mbed Cloud API Key>\"\n     * });\n     * ```\n     *\n     * To create an instance of this API in the browser:\n     *\n     * ```html\n     * <script src=\"<mbed-cloud-sdk>/bundles/update.min.js\"></script>\n     *\n     * <script>\n     *     var bootstrap = new MbedCloudSDK.BootstrapApi({\n     *         apiKey: \"<Mbed Cloud API Key>\"\n     *     });\n     * </script>\n     * ```\n     * @param options Connection objects\n     */\n    constructor(options?: ConnectionOptions) {\n        this._endpoints = new Endpoints(options);\n    }\n\n     /**\n      * List Psks\n      *\n      * Example:\n      * ```JavaScript\n      * bootstrap.listPsks()\n      * .then(psks => {\n      *     // Utilize psks here\n      * })\n      * .catch(error => {\n      *     console.log(error);\n      * });\n      * ```\n      *\n      * @param options options\n      * @returns Promise of listResponse\n      */\n    public listPsks(options?: PskListOptions): Promise<ListResponse<PreSharedKey>>;\n    /**\n     * List Psks\n     *\n     * Example:\n     * ```JavaScript\n     * bootstrap.listPsks(function(error, psks) {\n     *     if (error) throw error;\n     *     // Utilize psks here\n     * });\n     * ```\n     *\n     * @param options options\n     * @param callback A function that is passed the arguments (error, listResponse)\n     */\n    public listPsks(options?: PskListOptions, callback?: CallbackFn<ListResponse<PreSharedKey>>): void;\n    public listPsks(options?: any, callback?: CallbackFn<ListResponse<PreSharedKey>>): Promise<ListResponse<PreSharedKey>> {\n        options = options || {};\n        if (typeof options === \"function\") {\n            callback = options;\n            options = {};\n        }\n\n        return apiWrapper(resultsFn => {\n            const { limit, after } = options as PskListOptions;\n            this._endpoints.bootstrap.listPreSharedKeys(limit, after, resultsFn);\n        }, (data, done) => {\n            let keys: Array<PreSharedKey>;\n            if (data && data.data && data.data.length) {\n                keys = data.data.map(key => {\n                    return mapToSDK(key, this);\n                });\n            }\n\n            done(null, new ListResponse(data, keys));\n        }, callback);\n    }\n\n    /**\n     * Set a device's pre-shared key.\n     *\n     * Example:\n     * ```JavaScript\n     * bootstrap.addPsk({endpointName: 'abc', secretHex: 'secret'})\n     * .then(preSharedKey => {\n     *     // success\n     * })\n     * .catch(error => {\n     *     console.log(error);\n     * });\n     * ```\n     *\n     * @param preSharedKey Claim details\n     * @returns Promise of bootstrap claim\n     */\n    public addPsk(preSharedKey: AddPreSharedKey): Promise<PreSharedKey>;\n    /**\n     * Set a device's pre-shared key.\n     *\n     * Example:\n     * ```JavaScript\n     * bootstrap.addPsk({endpointName: 'abc', secretHex: 'secret'},\n     * function(error, preSharedKey) {\n     *     if (error) throw error;\n     *     // success\n     * });\n     * ```\n     *\n     * @param presharedkey Claim details\n     * @param callback A function that is passed the arguments (error, presharedkey)\n     */\n    public addPsk(preSharedKey: AddPreSharedKey, callback: CallbackFn<PreSharedKey>): void;\n    public addPsk(preSharedKey: AddPreSharedKey, callback?: CallbackFn<PreSharedKey>): Promise<PreSharedKey> {\n        return apiWrapper(resultsFn => {\n            this._endpoints.bootstrap.uploadPreSharedKey(mapToSpec(preSharedKey), resultsFn);\n        }, (_data, done) => {\n            done(null, mapFrom(preSharedKey, this));\n        }, callback);\n    }\n\n    /**\n     * Get a device's pre-shared key\n     *\n     * note: the secretHex will not be included in the response\n     *\n     * Example:\n     * ```JavaScript\n     * bootstrap.getPsk('abc')\n     * .then(preSharedKey => {\n     *     // success\n     * })\n     * .catch(error => {\n     *     console.log(error);\n     * });\n     * ```\n     *\n     * @param preSharedKey Claim details\n     * @returns Promise of bootstrap claim\n     */\n    public getPsk(preSharedKey: string): Promise<PreSharedKey>;\n    /**\n     * Get a device's pre-shared key\n     *\n     * note: the secretHex will not be included in the response\n     *\n     * Example:\n     * ```JavaScript\n     * bootstrap.getPsk('abc',\n     * function(error, preSharedKey) {\n     *     if (error) throw error;\n     *     // success\n     * });\n     * ```\n     *\n     * @param presharedkey Claim details\n     * @param callback A function that is passed the arguments (error, presharedkey)\n     */\n    public getPsk(preSharedKey: string, callback: CallbackFn<PreSharedKey>): void;\n    public getPsk(preSharedKey: string, callback?: CallbackFn<PreSharedKey>): Promise<PreSharedKey> {\n        return apiWrapper(resultsFn => {\n            this._endpoints.bootstrap.getPreSharedKey(preSharedKey, resultsFn);\n        }, (data, done) => {\n            done(null, mapToSDK(data, this));\n        }, callback);\n    }\n\n    /**\n     * Delete a device's pre-shared key.\n     *\n     * Example:\n     * ```JavaScript\n     * bootstrap.deletePsk('abc')\n     * .then(preSharedKey => {\n     *     // success\n     * })\n     * .catch(error => {\n     *     console.log(error);\n     * });\n     * ```\n     *\n     * @param preSharedKey Claim details\n     * @returns Promise of bootstrap claim\n     */\n    public deletePsk(preSharedKey: string): Promise<void>;\n    /**\n     * Delete a device's pre-shared key.\n     *\n     * Example:\n     * ```JavaScript\n     * bootstrap.deletePsk('abc',\n     * function(error, preSharedKey) {\n     *     if (error) throw error;\n     *     // success\n     * });\n     * ```\n     *\n     * @param presharedkey Claim details\n     * @param callback A function that is passed the arguments (error, presharedkey)\n     */\n    public deletePsk(preSharedKey: string, callback: CallbackFn<void>): void;\n    public deletePsk(preSharedKey: string, callback?: CallbackFn<void>): Promise<void> {\n        return apiWrapper(resultsFn => {\n            this._endpoints.bootstrap.deletePreSharedKey(preSharedKey, resultsFn);\n        }, (_data, done) => {\n            done(null, null);\n        }, callback);\n    }\n\n    /**\n     * Get meta data for the last Mbed Cloud API call\n     * @returns Promise of meta data\n     */\n    public getLastApiMetadata(): Promise<ApiMetadata>;\n    /**\n     * Get meta data for the last Mbed Cloud API call\n     * @param callback A function that is passed the arguments (error, meta data)\n     */\n    public getLastApiMetadata(callback: CallbackFn<ApiMetadata>): void;\n    public getLastApiMetadata(callback?: CallbackFn<ApiMetadata>): Promise<ApiMetadata> {\n        return asyncStyle(done => {\n            done(null, this._endpoints.getLastMeta());\n        }, callback);\n    }\n}\n"],"sourceRoot":"../../src"}