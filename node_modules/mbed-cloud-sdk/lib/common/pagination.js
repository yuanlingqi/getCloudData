"use strict";
/*
 * Mbed Cloud JavaScript SDK
 * Copyright Arm Limited 2018
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var listResponse_1 = require("./listResponse");
// Run `execute` for all items returned from getPage, one page at a time. If any call to getPage or execute fails, the resulting promise is rejected.
exports.executeForAll = function (getPage, execute) {
    var recur = function (after) {
        return getPage({ after: after })
            .then(function (_a) {
            var data = _a.data, hasMore = _a.hasMore;
            var executePromises = data.map(function (_a) {
                var id = _a.id;
                return execute(id);
            });
            // Execute for all items in current page, then recur
            return Promise.all(executePromises)
                .then(function () {
                return hasMore ? recur(data[data.length - 1].id) : null;
            });
        });
    };
    return recur();
};
/**
 * ## Paginator
 * Iterator-like object over an entire result set of a truncated/paginated API operation (for instance,  listConnectedDevices).
 */
var Paginator = /** @class */ (function () {
    /**
     * Constructor
     * @param getPage Method returning a page of results ([ListResponse](./listresponse.html))
     * @param maxResults The maximum number of results to return
     * @param options List options
     */
    function Paginator(getPage, maxResults, options) {
        this.maxResults = maxResults;
        this.listOptions = Object.create(options);
        var pageSizeParameterName = "pageSize";
        if (pageSizeParameterName in this.listOptions) {
            this.listOptions.limit = this.listOptions[pageSizeParameterName];
        }
        this.pageRequester = getPage;
        this.collectionTotalCount = undefined;
        this.reset();
    }
    /**
     * Resets the state of the iterator.
     */
    Paginator.prototype.reset = function () {
        this.currentPageIndex = -1;
        this.currentElementIndex = -1;
        this.hasBrowsedFullCollection = false;
        this.currentPageData = null;
    };
    Paginator.prototype.setCurrentPage = function (page) {
        this.currentPageData = page;
        this.currentPageIndex++;
    };
    Paginator.prototype.fetchNextPageCursor = function (page) {
        if (page && page.data.length !== 0) {
            return page.continuationMarker ? page.continuationMarker : this.fetchIdOfLastElement(page);
        }
        return null;
    };
    Paginator.prototype.fetchIdOfLastElement = function (page) {
        var lastElement = page.data.slice(-1).pop();
        var idParameterName = "id";
        return "" + (lastElement[idParameterName] || lastElement);
    };
    Paginator.prototype.hasNewPage = function () {
        if (this.maxResults && this.pageSize() * (this.currentPageIndex + 1) > this.maxResults) {
            return false;
        }
        return this.currentPageData ? this.currentPageData.hasMore : !this.hasBrowsedFullCollection;
    };
    Paginator.prototype.nextPage = function () {
        var _this = this;
        if (this.hasNewPage()) {
            this.currentElementIndex = -1;
            var after = this.currentPageIndex < 0 ? null : this.fetchNextPageCursor(this.currentPageData);
            var newPageOptions = Object.create(this.listOptions);
            newPageOptions.after = after;
            var newPage = this.pageRequester(newPageOptions);
            return newPage.then(function (page) { _this.setCurrentPage(page); return page; }).then(function (page) {
                if (page && page.data.length !== 0) {
                    return new listResponse_1.ListResponse(page, page.data.slice(0, _this.remainingElementsNumber()));
                }
                else {
                    return null;
                }
            });
        }
        else {
            return Promise.resolve(null);
        }
    };
    /**
     * Gets collection total count (Approximate number of results according to the API).
     */
    Paginator.prototype.totalCount = function () {
        var _this = this;
        if (this.collectionTotalCount) {
            return Promise.resolve(this.collectionTotalCount);
        }
        if (this.currentPageData && this.currentPageData.totalCount) {
            this.collectionTotalCount = this.currentPageData.totalCount;
            return Promise.resolve(this.collectionTotalCount);
        }
        else {
            var newPageOptions = Object.create(this.listOptions);
            if (newPageOptions.include) {
                newPageOptions.include.push("totalCount");
            }
            else {
                newPageOptions.include = ["totalCount"];
            }
            var newPage = this.pageRequester(newPageOptions);
            return newPage.then(function (page) { _this.collectionTotalCount = page ? page.totalCount : undefined; return _this.collectionTotalCount; });
        }
    };
    /**
     * Gets page size.
     */
    Paginator.prototype.pageSize = function () {
        return this.currentPageData ? this.currentPageData.data.length : this.listOptions.limit;
    };
    /**
     * Checks whether there is a next element in the collection.
     */
    Paginator.prototype.hasNext = function () {
        if (this.hasNewPage()) {
            return true;
        }
        var remainder = this.remainingElementsNumber();
        return this.currentElementIndex < remainder - 1;
    };
    Paginator.prototype.remainingElementsNumber = function () {
        var remainingResults = this.maxResults ? this.maxResults - this.pageSize() * this.currentPageIndex : this.pageSize();
        return remainingResults ? remainingResults < 0 ? 0 : remainingResults : null;
    };
    Paginator.prototype.fetchElementInPage = function (page, index, remainder, setIndex) {
        if (!page) {
            return null;
        }
        var elementIndex = index > remainder ? remainder : index;
        if (setIndex) {
            this.currentElementIndex = elementIndex;
        }
        return elementIndex < 0 || elementIndex >= page.data.length ? null : page.data[elementIndex];
    };
    /**
     * Returns the first item from the query, or null if there are no results.
     */
    Paginator.prototype.first = function () {
        this.reset();
        return this.next();
    };
    /**
     *  Gets next element in the sequence.
     */
    Paginator.prototype.next = function () {
        var _this = this;
        this.currentElementIndex++;
        if (this.currentPageData) {
            var nextElement = this.fetchElementInPage(this.currentPageData, this.currentElementIndex, this.remainingElementsNumber(), false);
            return nextElement ? Promise.resolve(nextElement) : this.nextPage().then(function (page) { return page ? _this.next() : null; });
        }
        else {
            return this.nextPage().then(function (page) { return page ? _this.next() : null; });
        }
    };
    Paginator.prototype.browseAndConcatenateAllPages = function () {
        var _this = this;
        if (this.hasNewPage()) {
            return this.nextPage().then(function (page) { return _this.browseAndConcatenateAllPages().then(function (data) { return page.data.length === 0 ? data : page.data.concat(data); }); });
        }
        return Promise.resolve([]);
    };
    Paginator.prototype.executeOnAllElements = function (execute) {
        var _this = this;
        if (this.hasNext()) {
            return this.next().then(function (element) { return execute(element); }).then(function () { return _this.executeOnAllElements(execute); });
        }
        return Promise.resolve();
    };
    /**
     * Executes a function on all the elements of the collection.
     * @param execute method to execute on the elements
     * Note: This requires browsing the whole collection and therefore can be expensive.
     */
    Paginator.prototype.executeForAll = function (execute) {
        this.reset();
        return this.executeOnAllElements(execute);
    };
    /**
     * Gets an array of all the elements of the collection.
     * Note: This requires browsing the whole collection and therefore can be expensive.
     * Moreover, all elements are stored in memory and hence, be careful when dealing with big collections.
     */
    Paginator.prototype.all = function () {
        this.reset();
        return this.browseAndConcatenateAllPages();
    };
    return Paginator;
}());
exports.Paginator = Paginator;

//# sourceMappingURL=pagination.js.map
