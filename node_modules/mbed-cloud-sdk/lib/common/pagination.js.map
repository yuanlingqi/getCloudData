{"version":3,"sources":["common/pagination.ts"],"names":[],"mappings":"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","file":"pagination.js","sourcesContent":["/*\n * Mbed Cloud JavaScript SDK\n * Copyright Arm Limited 2018\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ListResponse } from \"./listResponse\";\nimport { ListOptions } from \"./interfaces\";\n\n// Run `execute` for all items returned from getPage, one page at a time. If any call to getPage or execute fails, the resulting promise is rejected.\nexport const executeForAll = <T extends { id: string }>(\n    getPage: (options: { after?: string }) => Promise<ListResponse<T>>,\n    execute: (id: string) => Promise<void>\n) => {\n    const recur = (after?: string): Promise<void> => {\n        return getPage({ after })\n            .then(({ data, hasMore }) => {\n                const executePromises = data.map(({ id }) => execute(id));\n\n                // Execute for all items in current page, then recur\n                return Promise.all(executePromises)\n                    .then(() => {\n                        return hasMore ? recur(data[data.length - 1].id) : null;\n                    });\n            });\n    };\n\n    return recur();\n};\n\n/**\n * ## Paginator\n * Iterator-like object over an entire result set of a truncated/paginated API operation (for instance,  listConnectedDevices).\n */\nexport class Paginator<T, U extends ListOptions> {\n    private pageRequester: (options: U) => Promise<ListResponse<T>>;\n    private listOptions: U;\n    private currentPageIndex: number;\n    private currentPageData: ListResponse<T>;\n    private hasBrowsedFullCollection: boolean;\n    private currentElementIndex: number;\n    private collectionTotalCount: number;\n    /**\n     * Constructor\n     * @param getPage Method returning a page of results ([ListResponse](./listresponse.html))\n     * @param maxResults The maximum number of results to return\n     * @param options List options\n     */\n    constructor(getPage: (options: U) => Promise<ListResponse<T>>, public maxResults?: number | null, options?: U) {\n        this.listOptions = Object.create(options);\n        const pageSizeParameterName = \"pageSize\";\n        if (pageSizeParameterName in this.listOptions) {\n            this.listOptions.limit = this.listOptions[pageSizeParameterName];\n        }\n        this.pageRequester = getPage;\n        this.collectionTotalCount = undefined;\n        this.reset();\n    }\n    /**\n     * Resets the state of the iterator.\n     */\n    private reset(): void {\n        this.currentPageIndex = -1;\n        this.currentElementIndex = -1;\n        this.hasBrowsedFullCollection = false;\n        this.currentPageData = null;\n    }\n\n    private setCurrentPage(page: ListResponse<T>): void {\n        this.currentPageData = page;\n        this.currentPageIndex++;\n    }\n\n    private fetchNextPageCursor(page: ListResponse<T>): string {\n        if (page && page.data.length !== 0) {\n            return page.continuationMarker ? page.continuationMarker : this.fetchIdOfLastElement(page);\n        }\n        return null;\n    }\n\n    private fetchIdOfLastElement(page: ListResponse<T>): string {\n        const lastElement = page.data.slice(-1).pop();\n        const idParameterName = \"id\";\n        return \"\" + (lastElement[idParameterName] || lastElement);\n    }\n\n    private hasNewPage(): boolean {\n        if (this.maxResults && this.pageSize() * (this.currentPageIndex + 1) > this.maxResults) {\n            return false;\n        }\n        return this.currentPageData ? this.currentPageData.hasMore : !this.hasBrowsedFullCollection;\n    }\n\n    private nextPage(): Promise<ListResponse<T>> {\n        if (this.hasNewPage()) {\n            this.currentElementIndex = -1;\n            const after: string = this.currentPageIndex < 0 ? null : this.fetchNextPageCursor(this.currentPageData);\n            const newPageOptions: U = Object.create(this.listOptions);\n            newPageOptions.after = after;\n            const newPage = this.pageRequester(newPageOptions);\n            return newPage.then(page => { this.setCurrentPage(page); return page; }).then(page => {\n                if (page && page.data.length !== 0) {\n                    return new ListResponse<T>(page, page.data.slice(0, this.remainingElementsNumber()));\n                } else {\n                    return null;\n                }\n            });\n        } else {\n            return Promise.resolve(null);\n        }\n    }\n\n    /**\n     * Gets collection total count (Approximate number of results according to the API).\n     */\n    public totalCount(): Promise<number> {\n        if (this.collectionTotalCount) {\n            return Promise.resolve(this.collectionTotalCount);\n        }\n        if (this.currentPageData && this.currentPageData.totalCount) {\n            this.collectionTotalCount = this.currentPageData.totalCount;\n            return Promise.resolve(this.collectionTotalCount);\n        } else {\n            const newPageOptions: U = Object.create(this.listOptions);\n            if (newPageOptions.include) {\n                newPageOptions.include.push(\"totalCount\");\n            } else {\n                newPageOptions.include = [ \"totalCount\" ];\n            }\n            const newPage = this.pageRequester(newPageOptions);\n            return newPage.then(page => { this.collectionTotalCount = page ? page.totalCount : undefined; return this.collectionTotalCount; });\n        }\n    }\n    /**\n     * Gets page size.\n     */\n    public pageSize(): number {\n        return this.currentPageData ? this.currentPageData.data.length : this.listOptions.limit;\n    }\n\n    /**\n     * Checks whether there is a next element in the collection.\n     */\n    public hasNext(): boolean {\n        if (this.hasNewPage()) {\n            return true;\n        }\n        const remainder = this.remainingElementsNumber();\n        return this.currentElementIndex < remainder - 1;\n    }\n\n    private remainingElementsNumber(): number {\n        const remainingResults: number = this.maxResults ? this.maxResults - this.pageSize() * this.currentPageIndex : this.pageSize();\n        return remainingResults ? remainingResults < 0 ? 0 : remainingResults : null;\n    }\n\n    private fetchElementInPage(page: ListResponse<T>, index: number, remainder: number, setIndex: boolean): T {\n        if (!page) {\n            return null;\n        }\n        const elementIndex: number = index > remainder ? remainder : index;\n        if (setIndex) {\n            this.currentElementIndex = elementIndex;\n        }\n        return elementIndex < 0 || elementIndex >= page.data.length ? null : page.data[elementIndex];\n    }\n    /**\n     * Returns the first item from the query, or null if there are no results.\n     */\n    public first(): Promise<T> {\n        this.reset();\n        return this.next();\n    }\n\n    /**\n     *  Gets next element in the sequence.\n     */\n    public next(): Promise<T> {\n        this.currentElementIndex++;\n        if (this.currentPageData) {\n            const nextElement = this.fetchElementInPage(this.currentPageData, this.currentElementIndex, this.remainingElementsNumber(), false);\n            return nextElement ? Promise.resolve(nextElement) : this.nextPage().then(page => page ? this.next() : null);\n        } else {\n            return this.nextPage().then(page => page ? this.next() : null);\n        }\n    }\n\n    private browseAndConcatenateAllPages(): Promise<Array<T>> {\n        if (this.hasNewPage()) {\n            return this.nextPage().then(page => this.browseAndConcatenateAllPages().then(data => page.data.length === 0 ? data : page.data.concat(data)));\n        }\n        return Promise.resolve([]);\n    }\n\n    private executeOnAllElements(execute: (element: T) => Promise<void>) {\n        if (this.hasNext()) {\n            return this.next().then(element => execute(element)).then(() => this.executeOnAllElements(execute));\n        }\n        return Promise.resolve();\n    }\n    /**\n     * Executes a function on all the elements of the collection.\n     * @param execute method to execute on the elements\n     * Note: This requires browsing the whole collection and therefore can be expensive.\n     */\n    public executeForAll(execute: (element: T) => Promise<void>): Promise<void> {\n        this.reset();\n        return this.executeOnAllElements(execute);\n    }\n    /**\n     * Gets an array of all the elements of the collection.\n     * Note: This requires browsing the whole collection and therefore can be expensive.\n     * Moreover, all elements are stored in memory and hence, be careful when dealing with big collections.\n     */\n    public all(): Promise<Array<T>> {\n        this.reset();\n        return this.browseAndConcatenateAllPages();\n    }\n}\n"],"sourceRoot":"../../src"}