{"version":3,"sources":["subscribe/observers/observer.ts"],"names":[],"mappings":"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","file":"observer.js","sourcesContent":["/*\n* Mbed Cloud JavaScript SDK\n* Copyright Arm Limited 2017\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n* http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nexport class Observer<T> {\n\n    public subscribed: boolean = true;\n\n    private notificationQueue: Array<T>;\n\n    private callbacks: Array<(data: T) => any>;\n\n    private filters: Array<(data: T) => boolean>;\n\n    private _waiting: Array<(data: T) => any>;\n\n    constructor() {\n        this.notificationQueue = new Array();\n        this.callbacks = new Array();\n        this._waiting = new Array();\n        this.filters = new Array();\n    }\n\n    /**\n     * Notify this observer\n     * @param data the data to notify\n     */\n    public notify(data: T): void {\n        if (this.runLocalFilter(data)) {\n            // notify all callbacks\n            this._notifyCallbacks(data);\n\n            if (this._waiting.length > 0) {\n                // get first function in waiting queue\n                this._waiting.shift()(data);\n            } else {\n                // nothing waiting so add to collection\n                this.notificationQueue.push(data);\n            }\n        }\n    }\n\n    /**\n     * Gets the next value that the observer is notified of\n     *\n     * Example:\n     * ```JavaScript\n     * observer.once()\n     * .then(data => {\n     *     // do something with the data\n     *     console.log(data);\n     * });\n     * ```\n     *\n     * @returns Promise containing the data\n     */\n    public once(): Promise<T>;\n    /**\n     * Gets the next value that the observer is notified of\n     *\n     * Example:\n     * ```JavaScript\n     * observer.once(data => {\n     *     // do something with the data\n     *     console.log(data);\n     * });\n     * ```\n     *\n     * @param callback that is passed the data\n     */\n    public once(callback: (data: T) => any): void;\n    public once(callback?: (data: T) => any): Promise<T> {\n        if (this.notificationQueue.length > 0) {\n            const first = this.notificationQueue.shift();\n            if (callback) {\n                // imediately resolve callback\n                callback(first);\n            } else {\n                // imediately return a resolved promise\n                return new Promise<T>((resolve, _reject) => {\n                    resolve(first);\n                });\n            }\n        } else {\n            if (callback) {\n                // add callback to waiting\n                this._waiting.push(callback);\n            } else {\n                const promise = new Promise<T>((resolve, _reject) => {\n                    // function will resolve promise when called\n                    const wait = (data: T) => {\n                        resolve(data);\n                    };\n                    // add function to waiting queue\n                    this._waiting.push(wait);\n                });\n\n                return promise;\n            }\n        }\n    }\n\n    /**\n     * Add a Listener that is invoked when the observer recieves a notification.\n     * An observer can have many Listeners.\n     *\n     * Example:\n     * ```JavaScript\n     * var myListener = (data) => {\n     *     console.log(data);\n     * }\n     *\n     * observer.addListener(myListener);\n     * ```\n     *\n     * @param listener a listener\n     */\n    public addListener(listener: (data: T) => any): this {\n        this.callbacks.push(listener);\n        return this;\n    }\n\n    /**\n     * Remove a listener\n     *\n     * Example:\n     * ```JavaScript\n     * observer.removeListener(myListener);\n     * ```\n     *\n     * @param listener the listener to remove\n     */\n    public removeListener(listener: (data: T) => any): this {\n        const index = this.callbacks.indexOf(listener, 0);\n        if (index > -1) {\n            this.callbacks.splice(index, 1);\n        }\n        return this;\n    }\n\n    /**\n     * Clear all listeners\n     *\n     * Example:\n     * ```JavaScript\n     * observer.clearListeners();\n     * ```\n     *\n     */\n    public clearListeners(): this {\n        this.callbacks = new Array();\n        return this;\n    }\n\n    /**\n     * List the callbacks currently registered\n     *\n     * Example:\n     * ```JavaScript\n     * observer.listeners();\n     * ```\n     *\n     * @returns list of listeners\n     */\n    public listeners(): Array<(data: T) => any> {\n        return this.callbacks;\n    }\n\n    /**\n     * Get the current notification queue\n     *\n     * Example:\n     * ```JavaScript\n     * observer.getNotificationQueue();\n     * ```\n     *\n     * @returns list containing the data that has been sent to the observer\n     */\n    public getNotificationQueue(): Array<T> {\n        return this.notificationQueue;\n    }\n\n    public addLocalFilter(filter: (filter: T) => boolean): this {\n        this.filters.push(filter);\n        return this;\n    }\n\n    private runLocalFilter(data: T): boolean {\n        return this.filters.length > 0 ? this.filters.some(f => f(data)) : true;\n    }\n\n    private _notifyCallbacks(data: T) {\n        this.callbacks.forEach(fn => fn(data));\n    }\n}\n"],"sourceRoot":"../../../src"}