{"version":3,"sources":["subscribe/subscribe.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;EAeE;;AAGF,uEAAsE;AAGtE,6EAA4E;AAE5E;IAQI,mBAAY,QAAqB;QAC7B,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACX,IAAI,CAAC,OAAO,GAAG,QAAQ,CAAC;QAC5B,CAAC;QACD,IAAI,CAAC,oBAAoB,GAAG,IAAI,KAAK,EAAE,CAAC;QACxC,IAAI,CAAC,sBAAsB,GAAG,IAAI,KAAK,EAAE,CAAC;IAC9C,CAAC;IAED;;;;;;;;;;;;;OAaG;IACI,sCAAkB,GAAzB,UAA0B,MAA0B;QAChD,IAAM,QAAQ,GAAG,IAAI,yCAAmB,CAAC,MAAM,CAAC,CAAC;QACjD,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACzC,IAAI,CAAC,kBAAkB,EAAE,CAAC;QAE1B,MAAM,CAAC,QAAQ,CAAC;IACpB,CAAC;IAEM,kCAAc,GAArB,UAAsB,MAA6B,EAAE,SAA2C;QAA3C,0BAAA,EAAA,2BAA2C;QAC5F,IAAM,QAAQ,GAAG,IAAI,+CAAsB,CAAC,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;QAC7E,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC3C,IAAI,CAAC,kBAAkB,EAAE,CAAC;QAC1B,MAAM,CAAC,QAAQ,CAAC;IACpB,CAAC;IAED;;;OAGG;IACI,sCAAkB,GAAzB,UAA0B,IAA2B;QACjD,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,EAArB,CAAqB,CAAC,CAAC;IACzE,CAAC;IAED;;;OAGG;IACI,wCAAoB,GAA3B,UAA4B,IAAsB;QAC9C,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,EAArB,CAAqB,CAAC,CAAC;IAC3E,CAAC;IAEO,sCAAkB,GAA1B;QACI,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;YACf,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAC,CAAC;gBACpC,IAAI,CAAC,OAAO,CAAC,kBAAkB,EAAE,CAAC;YACtC,CAAC;QACL,CAAC;IACL,CAAC;IACL,gBAAC;AAAD,CApEA,AAoEC,IAAA;AApEY,8BAAS","file":"subscribe.js","sourcesContent":["/*\n* Mbed Cloud JavaScript SDK\n* Copyright Arm Limited 2017\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n* http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { ConnectApi } from \"../connect/connectApi\";\nimport { DeviceStateObserver } from \"./observers/deviceStateObserver\";\nimport { DeviceEvent, DeviceEventFilter, ResourceValuesFilter, NotificationData, FirstValueEnum } from \"../connect/types\";\nimport { Resource } from \"../connect/models/resource\";\nimport { ResourceValuesObserver } from \"./observers/resourceValuesObserver\";\n\nexport class Subscribe {\n\n    private connect: ConnectApi;\n\n    private deviceStateObservers: Array<DeviceStateObserver>;\n\n    private resourceValueObservers: Array<ResourceValuesObserver>;\n\n    constructor(_connect?: ConnectApi) {\n        if (_connect) {\n            this.connect = _connect;\n        }\n        this.deviceStateObservers = new Array();\n        this.resourceValueObservers = new Array();\n    }\n\n    /**\n     * Returns a deviceStateObserver that is listening for device events.\n     * To subscribe to specific events or devices, a DeviceEventFilter must be provided.\n     *\n     * Example: subscribe to device registration events.\n     *\n     * ```javascript\n     * const observer = connect.subscribe.deviceStateChanges({ event: \"registrations\" });\n     * // add a callback\n     * observer.addCallback(res => console.log(res));\n     * ```\n     *\n     * @param filter the deviceEventFilter\n     */\n    public deviceStateChanges(filter?: DeviceEventFilter): DeviceStateObserver {\n        const observer = new DeviceStateObserver(filter);\n        this.deviceStateObservers.push(observer);\n        this.startNotifications();\n\n        return observer;\n    }\n\n    public resourceValues(filter?: ResourceValuesFilter, immediacy: FirstValueEnum = \"OnValueUpdate\" ): ResourceValuesObserver {\n        const observer = new ResourceValuesObserver(filter, this.connect, immediacy);\n        this.resourceValueObservers.push(observer);\n        this.startNotifications();\n        return observer;\n    }\n\n    /**\n     * Notify all observers\n     * @param data\n     */\n    public notifyDeviceEvents(data: DeviceEvent<Resource>): void {\n        this.deviceStateObservers.forEach(observer => observer.notify(data));\n    }\n\n    /**\n     * Notify all observers\n     * @param data\n     */\n    public notifyResourceValues(data: NotificationData): void {\n        this.resourceValueObservers.forEach(observer => observer.notify(data));\n    }\n\n    private startNotifications(): void {\n        if (this.connect) {\n            if (!this.connect.handleNotifications) {\n                this.connect.startNotifications();\n            }\n        }\n    }\n}\n"],"sourceRoot":"../../src"}