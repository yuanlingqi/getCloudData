general:
  artifacts:
    - ~/docs
    - ~/reports

machine:
  node:
    version: 6.14.3
  services:
    - docker
  environment:
    PROJECT_NAME: ${CIRCLE_PROJECT_REPONAME}
    PROJECT_LIVE_BRANCH: build
    PROJECT_DOCS: ${HOME}/docs
    PROJECT_REPORTS: ${HOME}/reports
    COVERAGE_REPORTS: ${PROJECT_REPORTS}/coverage
    FILE_UNITTESTS: ${PROJECT_REPORTS}/unittests.html
    FILE_INTTESTS: ${PROJECT_REPORTS}/inttests.html
    FILE_RAW: ${PROJECT_REPORTS}/raw.txt
    TESTRUNNER_DOCKER_IMAGE: 104059736540.dkr.ecr.us-west-2.amazonaws.com/mbed/sdk-testrunner:master

checkout:
  post:
    - git config --global user.name monty-bot
    - git config --global user.email monty-bot@arm.com

# Install dependencies for CI; latest npm, latest chrome, code coverage, html output and testrunner reqs
dependencies:
  pre:
    # - npm install -g npm@5.6.0
    # - npm install -g codecov ansi-html-stream
    # Version 65.0.3325.146-1 seems to have a bug which breaks the unit tests
    # - curl -L -o google-chrome.deb https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
    # - sudo apt-get update
    # - sudo apt-get install jq  # needed for json manipulation
    # - curl -L -o google-chrome.deb https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
    # - sudo dpkg -i google-chrome.deb
    # - sudo sed -i 's|HERE/chrome\"|HERE/chrome\" --disable-setuid-sandbox|g' /opt/google/chrome/google-chrome
    # - |
    #   login="$(aws ecr get-login)"
    #   ${login}
    #   login="$(aws ecr get-login --no-include-email)"
    #   ${login}
    # - docker pull ${TESTRUNNER_DOCKER_IMAGE}
    - mkdir -p ${HOME}/cci_fixtures
    - chmod -R 777 ${HOME}/cci_fixtures

compile:
  pre:
    # - pip install towncrier==18.5.0
  override:
    # we have to tell towncrier what the version number is; `jq` extracts the version, `tr` strips quotes from the json string
    # - cd docs/news && towncrier --yes --name="" --version=$(jq .version <../../package.json | tr -d '\"')
    # - cp CHANGELOG.md ${CIRCLE_ARTIFACTS}/
    # - npm run gulp
    # - mkdir -p ${PROJECT_DOCS}
    # - cp -r docs/* ${PROJECT_DOCS}/
    # - npm run tpip
    # - mkdir -p ${PROJECT_REPORTS}
    # - cp tpip.csv ${PROJECT_REPORTS}/

test:
  override:
    - echo "<h1>${PROJECT_NAME} unit tests (build ${CIRCLE_BUILD_NUM})</h1>" >> ${FILE_UNITTESTS}
    # - set -o pipefail && npm test 2>&1 | tee /dev/tty | grep -v '^Tunnel d' | ansi-html >> ${FILE_UNITTESTS}
    - cat ${FILE_UNITTESTS} | grep 'TOTAL' >> ${FILE_RAW}
    - echo "<h1>${PROJECT_NAME} integration tests (build ${CIRCLE_BUILD_NUM})</h1>" >> ${FILE_INTTESTS}
    # - npm run build-test-server
    # - set -o pipefail && bash run.sh 2>&1 | tee /dev/tty | ansi-html >> ${FILE_INTTESTS}:
    #     pwd: tests
    - cat ${FILE_INTTESTS} | grep 'seconds ====' >> ${FILE_RAW}
    # - mkdir -p ${COVERAGE_REPORTS}
    # - cp -r reports/* ${COVERAGE_REPORTS}
    - cat ${COVERAGE_REPORTS}/cobertura-coverage.xml | grep '<coverage' >> ${FILE_RAW}
    # - codecov ${COVERAGE_REPORTS}/lcov.info
    - mkdir -p ${CIRCLE_TEST_REPORTS}/junit
    - cp junit.xml ${CIRCLE_TEST_REPORTS}/junit/test-results.xml

deployment:
  staging:
    branch: master
    commands:
      - echo Syncing ${PROJECT_NAME} to ${PROJECT_LIVE_BRANCH} on GitHub...
      - git add --force bundles docs lib types
      - git stash save
      - git checkout ${PROJECT_LIVE_BRANCH}
      - git merge master --no-commit
      - git checkout stash -- .
      - git commit --allow-empty --message "Automatic Deployment [skip ci]"
      - git push
  # release:
  #   branch: /[0-9]+\.[0-9]+.*/
  #   commands:
      # - echo Tagging ${PROJECT_NAME} in GitHub...
      # - git tag $(jq .version <package.json | tr -d '\"')
      # - git push --tags
      # - if [[ ${CIRCLE_PROJECT_REPONAME} == mbed-cloud-sdk-javascript ]]; then echo 'tag and release'; else echo 'will not release from unofficial repo' && exit 1; fi
      # - "jq '. + { \"is_published\": true }' package.json > package.json.tmp && mv package.json.tmp package.json"
      # - git add CHANGELOG.md docs/news/*
      # - git commit -m "Hear yea, hear yea. News O'Clock. [skip ci]"
      # - git push --set-upstream origin ${CIRCLE_BRANCH}
